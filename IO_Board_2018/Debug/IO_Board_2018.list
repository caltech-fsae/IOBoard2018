
IO_Board_2018.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d04  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001e8c  08001e8c  00011e8c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001eb8  08001eb8  00011eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001ec0  08001ec0  00011ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001ec4  08001ec4  00011ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08001ec8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
  8 .bss          0000015c  20000070  20000070  00020070  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200001cc  200001cc  00020070  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 11 .debug_info   00012463  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002ae5  00000000  00000000  00032503  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000231b  00000000  00000000  00034fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000710  00000000  00000000  00037308  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007c8  00000000  00000000  00037a18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000441d  00000000  00000000  000381e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00002e9d  00000000  00000000  0003c5fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0003f49a  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000129c  00000000  00000000  0003f518  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001e74 	.word	0x08001e74

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08001e74 	.word	0x08001e74

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004d8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004da:	4a0e      	ldr	r2, [pc, #56]	; (8000514 <HAL_InitTick+0x3c>)
 80004dc:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_InitTick+0x40>)
{
 80004de:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004e0:	7818      	ldrb	r0, [r3, #0]
 80004e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e6:	fbb3 f3f0 	udiv	r3, r3, r0
 80004ea:	6810      	ldr	r0, [r2, #0]
 80004ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80004f0:	f000 fb10 	bl	8000b14 <HAL_SYSTICK_Config>
 80004f4:	4604      	mov	r4, r0
 80004f6:	b958      	cbnz	r0, 8000510 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004f8:	2d0f      	cmp	r5, #15
 80004fa:	d809      	bhi.n	8000510 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004fc:	4602      	mov	r2, r0
 80004fe:	4629      	mov	r1, r5
 8000500:	f04f 30ff 	mov.w	r0, #4294967295
 8000504:	f000 fad2 	bl	8000aac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000508:	4b04      	ldr	r3, [pc, #16]	; (800051c <HAL_InitTick+0x44>)
 800050a:	4620      	mov	r0, r4
 800050c:	601d      	str	r5, [r3, #0]
 800050e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000510:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000512:	bd38      	pop	{r3, r4, r5, pc}
 8000514:	20000008 	.word	0x20000008
 8000518:	20000000 	.word	0x20000000
 800051c:	20000004 	.word	0x20000004

08000520 <HAL_Init>:
{
 8000520:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000522:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <HAL_Init+0x30>)
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800052a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000532:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800053a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 faa3 	bl	8000a88 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f7ff ffc8 	bl	80004d8 <HAL_InitTick>
  HAL_MspInit();
 8000548:	f001 fabd 	bl	8001ac6 <HAL_MspInit>
}
 800054c:	2000      	movs	r0, #0
 800054e:	bd08      	pop	{r3, pc}
 8000550:	40023c00 	.word	0x40023c00

08000554 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000554:	4a03      	ldr	r2, [pc, #12]	; (8000564 <HAL_IncTick+0x10>)
 8000556:	4b04      	ldr	r3, [pc, #16]	; (8000568 <HAL_IncTick+0x14>)
 8000558:	6811      	ldr	r1, [r2, #0]
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	440b      	add	r3, r1
 800055e:	6013      	str	r3, [r2, #0]
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	20000098 	.word	0x20000098
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800056c:	4b01      	ldr	r3, [pc, #4]	; (8000574 <HAL_GetTick+0x8>)
 800056e:	6818      	ldr	r0, [r3, #0]
}
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	20000098 	.word	0x20000098

08000578 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000578:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800057a:	4604      	mov	r4, r0
 800057c:	2800      	cmp	r0, #0
 800057e:	f000 8099 	beq.w	80006b4 <HAL_ADC_Init+0x13c>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000582:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000584:	b923      	cbnz	r3, 8000590 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000586:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000588:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800058c:	f000 fede 	bl	800134c <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000590:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000592:	06db      	lsls	r3, r3, #27
 8000594:	f100 808c 	bmi.w	80006b0 <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000598:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800059a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800059e:	f023 0302 	bic.w	r3, r3, #2
 80005a2:	f043 0302 	orr.w	r3, r3, #2
 80005a6:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80005a8:	4b43      	ldr	r3, [pc, #268]	; (80006b8 <HAL_ADC_Init+0x140>)
 80005aa:	685a      	ldr	r2, [r3, #4]
 80005ac:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80005b0:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80005b2:	685a      	ldr	r2, [r3, #4]
 80005b4:	6861      	ldr	r1, [r4, #4]
 80005b6:	430a      	orrs	r2, r1
 80005b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80005ba:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80005bc:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80005be:	685a      	ldr	r2, [r3, #4]
 80005c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80005c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80005c6:	685a      	ldr	r2, [r3, #4]
 80005c8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80005cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80005ce:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80005d0:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80005d2:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80005d6:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80005d8:	685a      	ldr	r2, [r3, #4]
 80005da:	430a      	orrs	r2, r1
 80005dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80005de:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80005e0:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80005e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80005e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80005e8:	689a      	ldr	r2, [r3, #8]
 80005ea:	430a      	orrs	r2, r1
 80005ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80005ee:	4933      	ldr	r1, [pc, #204]	; (80006bc <HAL_ADC_Init+0x144>)
 80005f0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80005f2:	428a      	cmp	r2, r1
 80005f4:	d050      	beq.n	8000698 <HAL_ADC_Init+0x120>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80005f6:	6899      	ldr	r1, [r3, #8]
 80005f8:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 80005fc:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80005fe:	6899      	ldr	r1, [r3, #8]
 8000600:	430a      	orrs	r2, r1
 8000602:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000604:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000606:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000608:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800060c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800060e:	689a      	ldr	r2, [r3, #8]
 8000610:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000612:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000614:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000616:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000618:	f022 0202 	bic.w	r2, r2, #2
 800061c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 800061e:	689a      	ldr	r2, [r3, #8]
 8000620:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000624:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000626:	6a22      	ldr	r2, [r4, #32]
 8000628:	2a00      	cmp	r2, #0
 800062a:	d03d      	beq.n	80006a8 <HAL_ADC_Init+0x130>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800062c:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800062e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000630:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000634:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000636:	685a      	ldr	r2, [r3, #4]
 8000638:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800063c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800063e:	685a      	ldr	r2, [r3, #4]
 8000640:	3901      	subs	r1, #1
 8000642:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000646:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800064a:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800064c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000654:	3901      	subs	r1, #1
 8000656:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800065a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800065c:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 800065e:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000660:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000664:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000666:	689a      	ldr	r2, [r3, #8]
 8000668:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 800066c:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800066e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000670:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000672:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000676:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000678:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800067a:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800067c:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8000680:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000682:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000684:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000686:	f023 0303 	bic.w	r3, r3, #3
 800068a:	f043 0301 	orr.w	r3, r3, #1
 800068e:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8000690:	2300      	movs	r3, #0
 8000692:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8000696:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000698:	689a      	ldr	r2, [r3, #8]
 800069a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800069e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006a0:	689a      	ldr	r2, [r3, #8]
 80006a2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80006a6:	e7b4      	b.n	8000612 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80006a8:	685a      	ldr	r2, [r3, #4]
 80006aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80006ae:	e7ca      	b.n	8000646 <HAL_ADC_Init+0xce>
    tmp_hal_status = HAL_ERROR;
 80006b0:	2001      	movs	r0, #1
 80006b2:	e7ed      	b.n	8000690 <HAL_ADC_Init+0x118>
    return HAL_ERROR;
 80006b4:	2001      	movs	r0, #1
}
 80006b6:	bd10      	pop	{r4, pc}
 80006b8:	40012300 	.word	0x40012300
 80006bc:	0f000001 	.word	0x0f000001

080006c0 <HAL_ADC_Start>:
{
 80006c0:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 80006c2:	2300      	movs	r3, #0
 80006c4:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80006c6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d04e      	beq.n	800076c <HAL_ADC_Start+0xac>
 80006ce:	2301      	movs	r3, #1
 80006d0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80006d4:	6803      	ldr	r3, [r0, #0]
 80006d6:	689a      	ldr	r2, [r3, #8]
 80006d8:	07d1      	lsls	r1, r2, #31
 80006da:	d505      	bpl.n	80006e8 <HAL_ADC_Start+0x28>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80006dc:	689a      	ldr	r2, [r3, #8]
 80006de:	07d2      	lsls	r2, r2, #31
 80006e0:	d414      	bmi.n	800070c <HAL_ADC_Start+0x4c>
  return HAL_OK;
 80006e2:	2000      	movs	r0, #0
}
 80006e4:	b002      	add	sp, #8
 80006e6:	4770      	bx	lr
    __HAL_ADC_ENABLE(hadc);
 80006e8:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80006ea:	4921      	ldr	r1, [pc, #132]	; (8000770 <HAL_ADC_Start+0xb0>)
    __HAL_ADC_ENABLE(hadc);
 80006ec:	f042 0201 	orr.w	r2, r2, #1
 80006f0:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80006f2:	4a20      	ldr	r2, [pc, #128]	; (8000774 <HAL_ADC_Start+0xb4>)
 80006f4:	6812      	ldr	r2, [r2, #0]
 80006f6:	fbb2 f2f1 	udiv	r2, r2, r1
 80006fa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 80006fe:	9201      	str	r2, [sp, #4]
    while(counter != 0U)
 8000700:	9a01      	ldr	r2, [sp, #4]
 8000702:	2a00      	cmp	r2, #0
 8000704:	d0ea      	beq.n	80006dc <HAL_ADC_Start+0x1c>
      counter--;
 8000706:	9a01      	ldr	r2, [sp, #4]
 8000708:	3a01      	subs	r2, #1
 800070a:	e7f8      	b.n	80006fe <HAL_ADC_Start+0x3e>
    ADC_STATE_CLR_SET(hadc->State,
 800070c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800070e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000712:	f022 0201 	bic.w	r2, r2, #1
 8000716:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800071a:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800071c:	685a      	ldr	r2, [r3, #4]
 800071e:	0551      	lsls	r1, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000720:	bf41      	itttt	mi
 8000722:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 8000724:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8000728:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 800072c:	6402      	strmi	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800072e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000730:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000734:	bf1c      	itt	ne
 8000736:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 8000738:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 800073c:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 800073e:	2200      	movs	r2, #0
 8000740:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000744:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000748:	601a      	str	r2, [r3, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800074a:	4a0b      	ldr	r2, [pc, #44]	; (8000778 <HAL_ADC_Start+0xb8>)
 800074c:	6852      	ldr	r2, [r2, #4]
 800074e:	06d2      	lsls	r2, r2, #27
 8000750:	d108      	bne.n	8000764 <HAL_ADC_Start+0xa4>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000752:	6898      	ldr	r0, [r3, #8]
 8000754:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8000758:	d1c3      	bne.n	80006e2 <HAL_ADC_Start+0x22>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800075a:	689a      	ldr	r2, [r3, #8]
 800075c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	e7bf      	b.n	80006e4 <HAL_ADC_Start+0x24>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000764:	4a05      	ldr	r2, [pc, #20]	; (800077c <HAL_ADC_Start+0xbc>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d1bb      	bne.n	80006e2 <HAL_ADC_Start+0x22>
 800076a:	e7f2      	b.n	8000752 <HAL_ADC_Start+0x92>
  __HAL_LOCK(hadc);
 800076c:	2002      	movs	r0, #2
 800076e:	e7b9      	b.n	80006e4 <HAL_ADC_Start+0x24>
 8000770:	000f4240 	.word	0x000f4240
 8000774:	20000008 	.word	0x20000008
 8000778:	40012300 	.word	0x40012300
 800077c:	40012000 	.word	0x40012000

08000780 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8000780:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000784:	2b01      	cmp	r3, #1
 8000786:	d017      	beq.n	80007b8 <HAL_ADC_Stop+0x38>
 8000788:	2301      	movs	r3, #1
 800078a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_ADC_DISABLE(hadc);
 800078e:	6803      	ldr	r3, [r0, #0]
 8000790:	689a      	ldr	r2, [r3, #8]
 8000792:	f022 0201 	bic.w	r2, r2, #1
 8000796:	609a      	str	r2, [r3, #8]
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000798:	689b      	ldr	r3, [r3, #8]
 800079a:	07db      	lsls	r3, r3, #31
 800079c:	d407      	bmi.n	80007ae <HAL_ADC_Stop+0x2e>
    ADC_STATE_CLR_SET(hadc->State,
 800079e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80007a0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80007a4:	f023 0301 	bic.w	r3, r3, #1
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6403      	str	r3, [r0, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80007ae:	2300      	movs	r3, #0
 80007b0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80007b4:	4618      	mov	r0, r3
 80007b6:	4770      	bx	lr
  __HAL_LOCK(hadc);
 80007b8:	2002      	movs	r0, #2
}
 80007ba:	4770      	bx	lr

080007bc <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80007bc:	6803      	ldr	r3, [r0, #0]
 80007be:	689a      	ldr	r2, [r3, #8]
{
 80007c0:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80007c2:	0556      	lsls	r6, r2, #21
{
 80007c4:	4604      	mov	r4, r0
 80007c6:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80007c8:	d50b      	bpl.n	80007e2 <HAL_ADC_PollForConversion+0x26>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80007ca:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80007cc:	05d8      	lsls	r0, r3, #23
 80007ce:	d508      	bpl.n	80007e2 <HAL_ADC_PollForConversion+0x26>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80007d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007d2:	f043 0320 	orr.w	r3, r3, #32
 80007d6:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 80007d8:	2300      	movs	r3, #0
 80007da:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 80007de:	2001      	movs	r0, #1
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
  tickstart = HAL_GetTick();
 80007e2:	f7ff fec3 	bl	800056c <HAL_GetTick>
 80007e6:	4606      	mov	r6, r0
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80007e8:	6823      	ldr	r3, [r4, #0]
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	0792      	lsls	r2, r2, #30
 80007ee:	d50c      	bpl.n	800080a <HAL_ADC_PollForConversion+0x4e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80007f0:	f06f 0212 	mvn.w	r2, #18
 80007f4:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80007f6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80007f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80007fc:	6422      	str	r2, [r4, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80007fe:	689a      	ldr	r2, [r3, #8]
 8000800:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000804:	d013      	beq.n	800082e <HAL_ADC_PollForConversion+0x72>
  return HAL_OK;
 8000806:	2000      	movs	r0, #0
 8000808:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 800080a:	1c69      	adds	r1, r5, #1
 800080c:	d0ed      	beq.n	80007ea <HAL_ADC_PollForConversion+0x2e>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800080e:	b945      	cbnz	r5, 8000822 <HAL_ADC_PollForConversion+0x66>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000810:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000812:	f043 0304 	orr.w	r3, r3, #4
 8000816:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 8000818:	2300      	movs	r3, #0
 800081a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 800081e:	2003      	movs	r0, #3
 8000820:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000822:	f7ff fea3 	bl	800056c <HAL_GetTick>
 8000826:	1b80      	subs	r0, r0, r6
 8000828:	4285      	cmp	r5, r0
 800082a:	d2dd      	bcs.n	80007e8 <HAL_ADC_PollForConversion+0x2c>
 800082c:	e7f0      	b.n	8000810 <HAL_ADC_PollForConversion+0x54>
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800082e:	69a2      	ldr	r2, [r4, #24]
 8000830:	2a00      	cmp	r2, #0
 8000832:	d1e8      	bne.n	8000806 <HAL_ADC_PollForConversion+0x4a>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000836:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 800083a:	d002      	beq.n	8000842 <HAL_ADC_PollForConversion+0x86>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800083c:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800083e:	055b      	lsls	r3, r3, #21
 8000840:	d4e1      	bmi.n	8000806 <HAL_ADC_PollForConversion+0x4a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000842:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000844:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000848:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800084a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800084c:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 8000850:	d1d9      	bne.n	8000806 <HAL_ADC_PollForConversion+0x4a>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000852:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6423      	str	r3, [r4, #64]	; 0x40
}
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 800085c:	6803      	ldr	r3, [r0, #0]
 800085e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8000860:	4770      	bx	lr
	...

08000864 <HAL_ADC_ConfigChannel>:
{
 8000864:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8000866:	2300      	movs	r3, #0
 8000868:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800086a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800086e:	2b01      	cmp	r3, #1
 8000870:	f000 8083 	beq.w	800097a <HAL_ADC_ConfigChannel+0x116>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000874:	680d      	ldr	r5, [r1, #0]
 8000876:	6804      	ldr	r4, [r0, #0]
 8000878:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 800087a:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 800087c:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 800087e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8000882:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000884:	d92a      	bls.n	80008dc <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000886:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800088a:	68e7      	ldr	r7, [r4, #12]
 800088c:	3b1e      	subs	r3, #30
 800088e:	f04f 0e07 	mov.w	lr, #7
 8000892:	fa0e fe03 	lsl.w	lr, lr, r3
 8000896:	ea27 070e 	bic.w	r7, r7, lr
 800089a:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800089c:	68e7      	ldr	r7, [r4, #12]
 800089e:	fa02 f303 	lsl.w	r3, r2, r3
 80008a2:	433b      	orrs	r3, r7
 80008a4:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 80008a6:	684a      	ldr	r2, [r1, #4]
 80008a8:	2a06      	cmp	r2, #6
 80008aa:	ea4f 0382 	mov.w	r3, r2, lsl #2
 80008ae:	d825      	bhi.n	80008fc <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80008b0:	4413      	add	r3, r2
 80008b2:	6b67      	ldr	r7, [r4, #52]	; 0x34
 80008b4:	1f59      	subs	r1, r3, #5
 80008b6:	231f      	movs	r3, #31
 80008b8:	408b      	lsls	r3, r1
 80008ba:	ea27 0303 	bic.w	r3, r7, r3
 80008be:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80008c0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80008c2:	fa06 f101 	lsl.w	r1, r6, r1
 80008c6:	4311      	orrs	r1, r2
 80008c8:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80008ca:	4b2d      	ldr	r3, [pc, #180]	; (8000980 <HAL_ADC_ConfigChannel+0x11c>)
 80008cc:	429c      	cmp	r4, r3
 80008ce:	d034      	beq.n	800093a <HAL_ADC_ConfigChannel+0xd6>
  __HAL_UNLOCK(hadc);
 80008d0:	2300      	movs	r3, #0
 80008d2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80008d6:	4618      	mov	r0, r3
}
 80008d8:	b003      	add	sp, #12
 80008da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80008dc:	6927      	ldr	r7, [r4, #16]
 80008de:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80008e2:	f04f 0e07 	mov.w	lr, #7
 80008e6:	fa0e fe03 	lsl.w	lr, lr, r3
 80008ea:	ea27 070e 	bic.w	r7, r7, lr
 80008ee:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80008f0:	6927      	ldr	r7, [r4, #16]
 80008f2:	fa02 f303 	lsl.w	r3, r2, r3
 80008f6:	433b      	orrs	r3, r7
 80008f8:	6123      	str	r3, [r4, #16]
 80008fa:	e7d4      	b.n	80008a6 <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 80008fc:	2a0c      	cmp	r2, #12
 80008fe:	d80e      	bhi.n	800091e <HAL_ADC_ConfigChannel+0xba>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000900:	4413      	add	r3, r2
 8000902:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000904:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8000908:	231f      	movs	r3, #31
 800090a:	4093      	lsls	r3, r2
 800090c:	ea21 0303 	bic.w	r3, r1, r3
 8000910:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000912:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000914:	fa06 f202 	lsl.w	r2, r6, r2
 8000918:	431a      	orrs	r2, r3
 800091a:	6322      	str	r2, [r4, #48]	; 0x30
 800091c:	e7d5      	b.n	80008ca <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800091e:	4413      	add	r3, r2
 8000920:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000922:	3b41      	subs	r3, #65	; 0x41
 8000924:	221f      	movs	r2, #31
 8000926:	409a      	lsls	r2, r3
 8000928:	ea21 0202 	bic.w	r2, r1, r2
 800092c:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800092e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000930:	fa06 f103 	lsl.w	r1, r6, r3
 8000934:	4311      	orrs	r1, r2
 8000936:	62e1      	str	r1, [r4, #44]	; 0x2c
 8000938:	e7c7      	b.n	80008ca <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800093a:	2d12      	cmp	r5, #18
 800093c:	d104      	bne.n	8000948 <HAL_ADC_ConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800093e:	4a11      	ldr	r2, [pc, #68]	; (8000984 <HAL_ADC_ConfigChannel+0x120>)
 8000940:	6853      	ldr	r3, [r2, #4]
 8000942:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000946:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000948:	f1a5 0310 	sub.w	r3, r5, #16
 800094c:	2b01      	cmp	r3, #1
 800094e:	d8bf      	bhi.n	80008d0 <HAL_ADC_ConfigChannel+0x6c>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000950:	4a0c      	ldr	r2, [pc, #48]	; (8000984 <HAL_ADC_ConfigChannel+0x120>)
 8000952:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000954:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000956:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800095a:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800095c:	d1b8      	bne.n	80008d0 <HAL_ADC_ConfigChannel+0x6c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800095e:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <HAL_ADC_ConfigChannel+0x124>)
 8000960:	4a0a      	ldr	r2, [pc, #40]	; (800098c <HAL_ADC_ConfigChannel+0x128>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	fbb3 f2f2 	udiv	r2, r3, r2
 8000968:	230a      	movs	r3, #10
 800096a:	4353      	muls	r3, r2
        counter--;
 800096c:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800096e:	9b01      	ldr	r3, [sp, #4]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d0ad      	beq.n	80008d0 <HAL_ADC_ConfigChannel+0x6c>
        counter--;
 8000974:	9b01      	ldr	r3, [sp, #4]
 8000976:	3b01      	subs	r3, #1
 8000978:	e7f8      	b.n	800096c <HAL_ADC_ConfigChannel+0x108>
  __HAL_LOCK(hadc);
 800097a:	2002      	movs	r0, #2
 800097c:	e7ac      	b.n	80008d8 <HAL_ADC_ConfigChannel+0x74>
 800097e:	bf00      	nop
 8000980:	40012000 	.word	0x40012000
 8000984:	40012300 	.word	0x40012300
 8000988:	20000008 	.word	0x20000008
 800098c:	000f4240 	.word	0x000f4240

08000990 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000990:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check CAN handle */
  if (hcan == NULL)
 8000992:	4604      	mov	r4, r0
 8000994:	2800      	cmp	r0, #0
 8000996:	d06e      	beq.n	8000a76 <HAL_CAN_Init+0xe6>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 8000998:	f890 3020 	ldrb.w	r3, [r0, #32]
 800099c:	b90b      	cbnz	r3, 80009a2 <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800099e:	f000 fd45 	bl	800142c <HAL_CAN_MspInit>
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80009a2:	6822      	ldr	r2, [r4, #0]
 80009a4:	6813      	ldr	r3, [r2, #0]
 80009a6:	f023 0302 	bic.w	r3, r3, #2
 80009aa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009ac:	f7ff fdde 	bl	800056c <HAL_GetTick>
 80009b0:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != RESET)
 80009b2:	6823      	ldr	r3, [r4, #0]
 80009b4:	685a      	ldr	r2, [r3, #4]
 80009b6:	0791      	lsls	r1, r2, #30
 80009b8:	d451      	bmi.n	8000a5e <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	f042 0201 	orr.w	r2, r2, #1
 80009c0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009c2:	f7ff fdd3 	bl	800056c <HAL_GetTick>
 80009c6:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == RESET)
 80009c8:	6823      	ldr	r3, [r4, #0]
 80009ca:	685a      	ldr	r2, [r3, #4]
 80009cc:	07d2      	lsls	r2, r2, #31
 80009ce:	d554      	bpl.n	8000a7a <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80009d0:	7e22      	ldrb	r2, [r4, #24]
 80009d2:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	bf0c      	ite	eq
 80009d8:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80009dc:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 80009e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80009e2:	7e62      	ldrb	r2, [r4, #25]
 80009e4:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	bf0c      	ite	eq
 80009ea:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80009ee:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 80009f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80009f4:	7ea2      	ldrb	r2, [r4, #26]
 80009f6:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	bf0c      	ite	eq
 80009fc:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a00:	f022 0220 	bicne.w	r2, r2, #32
 8000a04:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000a06:	7ee2      	ldrb	r2, [r4, #27]
 8000a08:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	bf0c      	ite	eq
 8000a0e:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a12:	f042 0210 	orrne.w	r2, r2, #16
 8000a16:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000a18:	7f22      	ldrb	r2, [r4, #28]
 8000a1a:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	bf0c      	ite	eq
 8000a20:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a24:	f022 0208 	bicne.w	r2, r2, #8
 8000a28:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000a2a:	7f62      	ldrb	r2, [r4, #29]
 8000a2c:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	bf0c      	ite	eq
 8000a32:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a36:	f022 0204 	bicne.w	r2, r2, #4
 8000a3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000a3c:	68e1      	ldr	r1, [r4, #12]
 8000a3e:	68a2      	ldr	r2, [r4, #8]
 8000a40:	430a      	orrs	r2, r1
 8000a42:	6921      	ldr	r1, [r4, #16]
 8000a44:	430a      	orrs	r2, r1
 8000a46:	6961      	ldr	r1, [r4, #20]
 8000a48:	430a      	orrs	r2, r1
 8000a4a:	6861      	ldr	r1, [r4, #4]
 8000a4c:	3901      	subs	r1, #1
 8000a4e:	430a      	orrs	r2, r1
 8000a50:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000a52:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000a54:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000a56:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8000a58:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 8000a5c:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a5e:	f7ff fd85 	bl	800056c <HAL_GetTick>
 8000a62:	1b40      	subs	r0, r0, r5
 8000a64:	280a      	cmp	r0, #10
 8000a66:	d9a4      	bls.n	80009b2 <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000a6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a6e:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a70:	2305      	movs	r3, #5
 8000a72:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8000a76:	2001      	movs	r0, #1
}
 8000a78:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a7a:	f7ff fd77 	bl	800056c <HAL_GetTick>
 8000a7e:	1b40      	subs	r0, r0, r5
 8000a80:	280a      	cmp	r0, #10
 8000a82:	d9a1      	bls.n	80009c8 <HAL_CAN_Init+0x38>
 8000a84:	e7f0      	b.n	8000a68 <HAL_CAN_Init+0xd8>
	...

08000a88 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a88:	4a07      	ldr	r2, [pc, #28]	; (8000aa8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000a8a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a8c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a90:	041b      	lsls	r3, r3, #16
 8000a92:	0c1b      	lsrs	r3, r3, #16
 8000a94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000a98:	0200      	lsls	r0, r0, #8
 8000a9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a9e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000aa2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000aa4:	60d3      	str	r3, [r2, #12]
 8000aa6:	4770      	bx	lr
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aac:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aae:	b530      	push	{r4, r5, lr}
 8000ab0:	68dc      	ldr	r4, [r3, #12]
 8000ab2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aba:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000abc:	2b04      	cmp	r3, #4
 8000abe:	bf28      	it	cs
 8000ac0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ac2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac4:	f04f 0501 	mov.w	r5, #1
 8000ac8:	fa05 f303 	lsl.w	r3, r5, r3
 8000acc:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ad0:	bf8c      	ite	hi
 8000ad2:	3c03      	subhi	r4, #3
 8000ad4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad6:	4019      	ands	r1, r3
 8000ad8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ada:	fa05 f404 	lsl.w	r4, r5, r4
 8000ade:	3c01      	subs	r4, #1
 8000ae0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000ae2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae4:	ea42 0201 	orr.w	r2, r2, r1
 8000ae8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aec:	bfaf      	iteee	ge
 8000aee:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af2:	f000 000f 	andlt.w	r0, r0, #15
 8000af6:	4b06      	ldrlt	r3, [pc, #24]	; (8000b10 <HAL_NVIC_SetPriority+0x64>)
 8000af8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afa:	bfa5      	ittet	ge
 8000afc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000b00:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b02:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b04:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000b08:	bd30      	pop	{r4, r5, pc}
 8000b0a:	bf00      	nop
 8000b0c:	e000ed00 	.word	0xe000ed00
 8000b10:	e000ed14 	.word	0xe000ed14

08000b14 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b14:	3801      	subs	r0, #1
 8000b16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b1a:	d20a      	bcs.n	8000b32 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1e:	4a07      	ldr	r2, [pc, #28]	; (8000b3c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b20:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b22:	21f0      	movs	r1, #240	; 0xf0
 8000b24:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b28:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b2a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b2c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000b32:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000e010 	.word	0xe000e010
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000b40:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000b42:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000b44:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000b46:	bf0c      	ite	eq
 8000b48:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000b4c:	f022 0204 	bicne.w	r2, r2, #4
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	4770      	bx	lr
 8000b54:	e000e010 	.word	0xe000e010

08000b58 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000b58:	4770      	bx	lr

08000b5a <HAL_SYSTICK_IRQHandler>:
{
 8000b5a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000b5c:	f7ff fffc 	bl	8000b58 <HAL_SYSTICK_Callback>
 8000b60:	bd08      	pop	{r3, pc}
	...

08000b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b68:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b6a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000d1c <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b70:	4a68      	ldr	r2, [pc, #416]	; (8000d14 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b72:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000d20 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b76:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b78:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000b7a:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b7e:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000b80:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b84:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000b88:	45b6      	cmp	lr, r6
 8000b8a:	f040 80ae 	bne.w	8000cea <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b8e:	684c      	ldr	r4, [r1, #4]
 8000b90:	f024 0710 	bic.w	r7, r4, #16
 8000b94:	2f02      	cmp	r7, #2
 8000b96:	d116      	bne.n	8000bc6 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000b98:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000b9c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ba0:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000ba4:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ba8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000bac:	f04f 0c0f 	mov.w	ip, #15
 8000bb0:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000bb4:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000bb8:	690d      	ldr	r5, [r1, #16]
 8000bba:	fa05 f50b 	lsl.w	r5, r5, fp
 8000bbe:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000bc2:	f8ca 5020 	str.w	r5, [sl, #32]
 8000bc6:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000bca:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000bcc:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000bd0:	fa05 f50a 	lsl.w	r5, r5, sl
 8000bd4:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bd6:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000bda:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bde:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000be2:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000be4:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000be8:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000bea:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bee:	d811      	bhi.n	8000c14 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000bf0:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bf2:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bf6:	68cf      	ldr	r7, [r1, #12]
 8000bf8:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000bfc:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000c00:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000c02:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c04:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c08:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000c12:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000c14:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c16:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c18:	688f      	ldr	r7, [r1, #8]
 8000c1a:	fa07 f70a 	lsl.w	r7, r7, sl
 8000c1e:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000c20:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c22:	00e5      	lsls	r5, r4, #3
 8000c24:	d561      	bpl.n	8000cea <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c26:	f04f 0b00 	mov.w	fp, #0
 8000c2a:	f8cd b00c 	str.w	fp, [sp, #12]
 8000c2e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c32:	4d39      	ldr	r5, [pc, #228]	; (8000d18 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c34:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000c38:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000c3c:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000c40:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000c44:	9703      	str	r7, [sp, #12]
 8000c46:	9f03      	ldr	r7, [sp, #12]
 8000c48:	f023 0703 	bic.w	r7, r3, #3
 8000c4c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000c50:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c54:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000c58:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c5c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000c60:	f04f 0e0f 	mov.w	lr, #15
 8000c64:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c68:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c6a:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c6e:	d043      	beq.n	8000cf8 <HAL_GPIO_Init+0x194>
 8000c70:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c74:	42a8      	cmp	r0, r5
 8000c76:	d041      	beq.n	8000cfc <HAL_GPIO_Init+0x198>
 8000c78:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c7c:	42a8      	cmp	r0, r5
 8000c7e:	d03f      	beq.n	8000d00 <HAL_GPIO_Init+0x19c>
 8000c80:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c84:	42a8      	cmp	r0, r5
 8000c86:	d03d      	beq.n	8000d04 <HAL_GPIO_Init+0x1a0>
 8000c88:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c8c:	42a8      	cmp	r0, r5
 8000c8e:	d03b      	beq.n	8000d08 <HAL_GPIO_Init+0x1a4>
 8000c90:	4548      	cmp	r0, r9
 8000c92:	d03b      	beq.n	8000d0c <HAL_GPIO_Init+0x1a8>
 8000c94:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000c98:	42a8      	cmp	r0, r5
 8000c9a:	d039      	beq.n	8000d10 <HAL_GPIO_Init+0x1ac>
 8000c9c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ca0:	42a8      	cmp	r0, r5
 8000ca2:	bf14      	ite	ne
 8000ca4:	2508      	movne	r5, #8
 8000ca6:	2507      	moveq	r5, #7
 8000ca8:	fa05 f50c 	lsl.w	r5, r5, ip
 8000cac:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000cb0:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000cb2:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000cb4:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cb6:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000cba:	bf0c      	ite	eq
 8000cbc:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000cbe:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000cc0:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000cc2:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cc4:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000cc8:	bf0c      	ite	eq
 8000cca:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000ccc:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000cce:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cd0:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cd2:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000cd6:	bf0c      	ite	eq
 8000cd8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000cda:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000cdc:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000cde:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ce0:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000ce2:	bf54      	ite	pl
 8000ce4:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000ce6:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000ce8:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cea:	3301      	adds	r3, #1
 8000cec:	2b10      	cmp	r3, #16
 8000cee:	f47f af44 	bne.w	8000b7a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000cf2:	b005      	add	sp, #20
 8000cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cf8:	465d      	mov	r5, fp
 8000cfa:	e7d5      	b.n	8000ca8 <HAL_GPIO_Init+0x144>
 8000cfc:	2501      	movs	r5, #1
 8000cfe:	e7d3      	b.n	8000ca8 <HAL_GPIO_Init+0x144>
 8000d00:	2502      	movs	r5, #2
 8000d02:	e7d1      	b.n	8000ca8 <HAL_GPIO_Init+0x144>
 8000d04:	2503      	movs	r5, #3
 8000d06:	e7cf      	b.n	8000ca8 <HAL_GPIO_Init+0x144>
 8000d08:	2504      	movs	r5, #4
 8000d0a:	e7cd      	b.n	8000ca8 <HAL_GPIO_Init+0x144>
 8000d0c:	2505      	movs	r5, #5
 8000d0e:	e7cb      	b.n	8000ca8 <HAL_GPIO_Init+0x144>
 8000d10:	2506      	movs	r5, #6
 8000d12:	e7c9      	b.n	8000ca8 <HAL_GPIO_Init+0x144>
 8000d14:	40013c00 	.word	0x40013c00
 8000d18:	40020000 	.word	0x40020000
 8000d1c:	40023800 	.word	0x40023800
 8000d20:	40021400 	.word	0x40021400

08000d24 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d24:	6903      	ldr	r3, [r0, #16]
 8000d26:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000d28:	bf14      	ite	ne
 8000d2a:	2001      	movne	r0, #1
 8000d2c:	2000      	moveq	r0, #0
 8000d2e:	4770      	bx	lr

08000d30 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d30:	b10a      	cbz	r2, 8000d36 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000d32:	6181      	str	r1, [r0, #24]
 8000d34:	4770      	bx	lr
 8000d36:	0409      	lsls	r1, r1, #16
 8000d38:	e7fb      	b.n	8000d32 <HAL_GPIO_WritePin+0x2>
	...

08000d3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d3c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d40:	4604      	mov	r4, r0
 8000d42:	b918      	cbnz	r0, 8000d4c <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000d44:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000d46:	b002      	add	sp, #8
 8000d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d4c:	6803      	ldr	r3, [r0, #0]
 8000d4e:	07dd      	lsls	r5, r3, #31
 8000d50:	d410      	bmi.n	8000d74 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d52:	6823      	ldr	r3, [r4, #0]
 8000d54:	0798      	lsls	r0, r3, #30
 8000d56:	d458      	bmi.n	8000e0a <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d58:	6823      	ldr	r3, [r4, #0]
 8000d5a:	071a      	lsls	r2, r3, #28
 8000d5c:	f100 809a 	bmi.w	8000e94 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d60:	6823      	ldr	r3, [r4, #0]
 8000d62:	075b      	lsls	r3, r3, #29
 8000d64:	f100 80b8 	bmi.w	8000ed8 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d68:	69a2      	ldr	r2, [r4, #24]
 8000d6a:	2a00      	cmp	r2, #0
 8000d6c:	f040 8119 	bne.w	8000fa2 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8000d70:	2000      	movs	r0, #0
 8000d72:	e7e8      	b.n	8000d46 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000d74:	4ba6      	ldr	r3, [pc, #664]	; (8001010 <HAL_RCC_OscConfig+0x2d4>)
 8000d76:	689a      	ldr	r2, [r3, #8]
 8000d78:	f002 020c 	and.w	r2, r2, #12
 8000d7c:	2a04      	cmp	r2, #4
 8000d7e:	d007      	beq.n	8000d90 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d80:	689a      	ldr	r2, [r3, #8]
 8000d82:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000d86:	2a08      	cmp	r2, #8
 8000d88:	d10a      	bne.n	8000da0 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	0259      	lsls	r1, r3, #9
 8000d8e:	d507      	bpl.n	8000da0 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d90:	4b9f      	ldr	r3, [pc, #636]	; (8001010 <HAL_RCC_OscConfig+0x2d4>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	039a      	lsls	r2, r3, #14
 8000d96:	d5dc      	bpl.n	8000d52 <HAL_RCC_OscConfig+0x16>
 8000d98:	6863      	ldr	r3, [r4, #4]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d1d9      	bne.n	8000d52 <HAL_RCC_OscConfig+0x16>
 8000d9e:	e7d1      	b.n	8000d44 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000da0:	6863      	ldr	r3, [r4, #4]
 8000da2:	4d9b      	ldr	r5, [pc, #620]	; (8001010 <HAL_RCC_OscConfig+0x2d4>)
 8000da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000da8:	d111      	bne.n	8000dce <HAL_RCC_OscConfig+0x92>
 8000daa:	682b      	ldr	r3, [r5, #0]
 8000dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000db0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000db2:	f7ff fbdb 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000db6:	4d96      	ldr	r5, [pc, #600]	; (8001010 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000db8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dba:	682b      	ldr	r3, [r5, #0]
 8000dbc:	039b      	lsls	r3, r3, #14
 8000dbe:	d4c8      	bmi.n	8000d52 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dc0:	f7ff fbd4 	bl	800056c <HAL_GetTick>
 8000dc4:	1b80      	subs	r0, r0, r6
 8000dc6:	2864      	cmp	r0, #100	; 0x64
 8000dc8:	d9f7      	bls.n	8000dba <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8000dca:	2003      	movs	r0, #3
 8000dcc:	e7bb      	b.n	8000d46 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000dd2:	d104      	bne.n	8000dde <HAL_RCC_OscConfig+0xa2>
 8000dd4:	682b      	ldr	r3, [r5, #0]
 8000dd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dda:	602b      	str	r3, [r5, #0]
 8000ddc:	e7e5      	b.n	8000daa <HAL_RCC_OscConfig+0x6e>
 8000dde:	682a      	ldr	r2, [r5, #0]
 8000de0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000de4:	602a      	str	r2, [r5, #0]
 8000de6:	682a      	ldr	r2, [r5, #0]
 8000de8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000dec:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d1df      	bne.n	8000db2 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8000df2:	f7ff fbbb 	bl	800056c <HAL_GetTick>
 8000df6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000df8:	682b      	ldr	r3, [r5, #0]
 8000dfa:	039f      	lsls	r7, r3, #14
 8000dfc:	d5a9      	bpl.n	8000d52 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dfe:	f7ff fbb5 	bl	800056c <HAL_GetTick>
 8000e02:	1b80      	subs	r0, r0, r6
 8000e04:	2864      	cmp	r0, #100	; 0x64
 8000e06:	d9f7      	bls.n	8000df8 <HAL_RCC_OscConfig+0xbc>
 8000e08:	e7df      	b.n	8000dca <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000e0a:	4b81      	ldr	r3, [pc, #516]	; (8001010 <HAL_RCC_OscConfig+0x2d4>)
 8000e0c:	689a      	ldr	r2, [r3, #8]
 8000e0e:	f012 0f0c 	tst.w	r2, #12
 8000e12:	d007      	beq.n	8000e24 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e14:	689a      	ldr	r2, [r3, #8]
 8000e16:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000e1a:	2a08      	cmp	r2, #8
 8000e1c:	d111      	bne.n	8000e42 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	025e      	lsls	r6, r3, #9
 8000e22:	d40e      	bmi.n	8000e42 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e24:	4b7a      	ldr	r3, [pc, #488]	; (8001010 <HAL_RCC_OscConfig+0x2d4>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	0795      	lsls	r5, r2, #30
 8000e2a:	d502      	bpl.n	8000e32 <HAL_RCC_OscConfig+0xf6>
 8000e2c:	68e2      	ldr	r2, [r4, #12]
 8000e2e:	2a01      	cmp	r2, #1
 8000e30:	d188      	bne.n	8000d44 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	6921      	ldr	r1, [r4, #16]
 8000e36:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000e3a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000e3e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e40:	e78a      	b.n	8000d58 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000e42:	68e2      	ldr	r2, [r4, #12]
 8000e44:	4b73      	ldr	r3, [pc, #460]	; (8001014 <HAL_RCC_OscConfig+0x2d8>)
 8000e46:	b1b2      	cbz	r2, 8000e76 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000e48:	2201      	movs	r2, #1
 8000e4a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e4c:	f7ff fb8e 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e50:	4d6f      	ldr	r5, [pc, #444]	; (8001010 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000e52:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e54:	682b      	ldr	r3, [r5, #0]
 8000e56:	0798      	lsls	r0, r3, #30
 8000e58:	d507      	bpl.n	8000e6a <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e5a:	682b      	ldr	r3, [r5, #0]
 8000e5c:	6922      	ldr	r2, [r4, #16]
 8000e5e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000e62:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000e66:	602b      	str	r3, [r5, #0]
 8000e68:	e776      	b.n	8000d58 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e6a:	f7ff fb7f 	bl	800056c <HAL_GetTick>
 8000e6e:	1b80      	subs	r0, r0, r6
 8000e70:	2802      	cmp	r0, #2
 8000e72:	d9ef      	bls.n	8000e54 <HAL_RCC_OscConfig+0x118>
 8000e74:	e7a9      	b.n	8000dca <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8000e76:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e78:	f7ff fb78 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e7c:	4d64      	ldr	r5, [pc, #400]	; (8001010 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000e7e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e80:	682b      	ldr	r3, [r5, #0]
 8000e82:	0799      	lsls	r1, r3, #30
 8000e84:	f57f af68 	bpl.w	8000d58 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e88:	f7ff fb70 	bl	800056c <HAL_GetTick>
 8000e8c:	1b80      	subs	r0, r0, r6
 8000e8e:	2802      	cmp	r0, #2
 8000e90:	d9f6      	bls.n	8000e80 <HAL_RCC_OscConfig+0x144>
 8000e92:	e79a      	b.n	8000dca <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000e94:	6962      	ldr	r2, [r4, #20]
 8000e96:	4b60      	ldr	r3, [pc, #384]	; (8001018 <HAL_RCC_OscConfig+0x2dc>)
 8000e98:	b17a      	cbz	r2, 8000eba <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000e9e:	f7ff fb65 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ea2:	4d5b      	ldr	r5, [pc, #364]	; (8001010 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000ea4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ea6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000ea8:	079f      	lsls	r7, r3, #30
 8000eaa:	f53f af59 	bmi.w	8000d60 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000eae:	f7ff fb5d 	bl	800056c <HAL_GetTick>
 8000eb2:	1b80      	subs	r0, r0, r6
 8000eb4:	2802      	cmp	r0, #2
 8000eb6:	d9f6      	bls.n	8000ea6 <HAL_RCC_OscConfig+0x16a>
 8000eb8:	e787      	b.n	8000dca <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000eba:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000ebc:	f7ff fb56 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ec0:	4d53      	ldr	r5, [pc, #332]	; (8001010 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000ec2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ec4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000ec6:	0798      	lsls	r0, r3, #30
 8000ec8:	f57f af4a 	bpl.w	8000d60 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ecc:	f7ff fb4e 	bl	800056c <HAL_GetTick>
 8000ed0:	1b80      	subs	r0, r0, r6
 8000ed2:	2802      	cmp	r0, #2
 8000ed4:	d9f6      	bls.n	8000ec4 <HAL_RCC_OscConfig+0x188>
 8000ed6:	e778      	b.n	8000dca <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ed8:	4b4d      	ldr	r3, [pc, #308]	; (8001010 <HAL_RCC_OscConfig+0x2d4>)
 8000eda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000edc:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000ee0:	d128      	bne.n	8000f34 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ee2:	9201      	str	r2, [sp, #4]
 8000ee4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ee6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000eea:	641a      	str	r2, [r3, #64]	; 0x40
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef2:	9301      	str	r3, [sp, #4]
 8000ef4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000ef6:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ef8:	4d48      	ldr	r5, [pc, #288]	; (800101c <HAL_RCC_OscConfig+0x2e0>)
 8000efa:	682b      	ldr	r3, [r5, #0]
 8000efc:	05d9      	lsls	r1, r3, #23
 8000efe:	d51b      	bpl.n	8000f38 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f00:	68a3      	ldr	r3, [r4, #8]
 8000f02:	4d43      	ldr	r5, [pc, #268]	; (8001010 <HAL_RCC_OscConfig+0x2d4>)
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d127      	bne.n	8000f58 <HAL_RCC_OscConfig+0x21c>
 8000f08:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000f0a:	f043 0301 	orr.w	r3, r3, #1
 8000f0e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000f10:	f7ff fb2c 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f14:	4d3e      	ldr	r5, [pc, #248]	; (8001010 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000f16:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f18:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f1c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000f1e:	079b      	lsls	r3, r3, #30
 8000f20:	d539      	bpl.n	8000f96 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000f22:	2e00      	cmp	r6, #0
 8000f24:	f43f af20 	beq.w	8000d68 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f28:	4a39      	ldr	r2, [pc, #228]	; (8001010 <HAL_RCC_OscConfig+0x2d4>)
 8000f2a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000f2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f30:	6413      	str	r3, [r2, #64]	; 0x40
 8000f32:	e719      	b.n	8000d68 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8000f34:	2600      	movs	r6, #0
 8000f36:	e7df      	b.n	8000ef8 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f38:	682b      	ldr	r3, [r5, #0]
 8000f3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f3e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000f40:	f7ff fb14 	bl	800056c <HAL_GetTick>
 8000f44:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f46:	682b      	ldr	r3, [r5, #0]
 8000f48:	05da      	lsls	r2, r3, #23
 8000f4a:	d4d9      	bmi.n	8000f00 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f4c:	f7ff fb0e 	bl	800056c <HAL_GetTick>
 8000f50:	1bc0      	subs	r0, r0, r7
 8000f52:	2802      	cmp	r0, #2
 8000f54:	d9f7      	bls.n	8000f46 <HAL_RCC_OscConfig+0x20a>
 8000f56:	e738      	b.n	8000dca <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f58:	2b05      	cmp	r3, #5
 8000f5a:	d104      	bne.n	8000f66 <HAL_RCC_OscConfig+0x22a>
 8000f5c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000f5e:	f043 0304 	orr.w	r3, r3, #4
 8000f62:	672b      	str	r3, [r5, #112]	; 0x70
 8000f64:	e7d0      	b.n	8000f08 <HAL_RCC_OscConfig+0x1cc>
 8000f66:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000f68:	f022 0201 	bic.w	r2, r2, #1
 8000f6c:	672a      	str	r2, [r5, #112]	; 0x70
 8000f6e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000f70:	f022 0204 	bic.w	r2, r2, #4
 8000f74:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d1ca      	bne.n	8000f10 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000f7a:	f7ff faf7 	bl	800056c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f7e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000f82:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f84:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000f86:	0798      	lsls	r0, r3, #30
 8000f88:	d5cb      	bpl.n	8000f22 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f8a:	f7ff faef 	bl	800056c <HAL_GetTick>
 8000f8e:	1bc0      	subs	r0, r0, r7
 8000f90:	4540      	cmp	r0, r8
 8000f92:	d9f7      	bls.n	8000f84 <HAL_RCC_OscConfig+0x248>
 8000f94:	e719      	b.n	8000dca <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f96:	f7ff fae9 	bl	800056c <HAL_GetTick>
 8000f9a:	1bc0      	subs	r0, r0, r7
 8000f9c:	4540      	cmp	r0, r8
 8000f9e:	d9bd      	bls.n	8000f1c <HAL_RCC_OscConfig+0x1e0>
 8000fa0:	e713      	b.n	8000dca <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000fa2:	4d1b      	ldr	r5, [pc, #108]	; (8001010 <HAL_RCC_OscConfig+0x2d4>)
 8000fa4:	68ab      	ldr	r3, [r5, #8]
 8000fa6:	f003 030c 	and.w	r3, r3, #12
 8000faa:	2b08      	cmp	r3, #8
 8000fac:	f43f aeca 	beq.w	8000d44 <HAL_RCC_OscConfig+0x8>
 8000fb0:	4e1b      	ldr	r6, [pc, #108]	; (8001020 <HAL_RCC_OscConfig+0x2e4>)
 8000fb2:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fb4:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000fb6:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fb8:	d134      	bne.n	8001024 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000fba:	f7ff fad7 	bl	800056c <HAL_GetTick>
 8000fbe:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fc0:	682b      	ldr	r3, [r5, #0]
 8000fc2:	0199      	lsls	r1, r3, #6
 8000fc4:	d41e      	bmi.n	8001004 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000fc6:	6a22      	ldr	r2, [r4, #32]
 8000fc8:	69e3      	ldr	r3, [r4, #28]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000fce:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000fd2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000fd4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000fd8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fda:	4c0d      	ldr	r4, [pc, #52]	; (8001010 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000fdc:	0852      	lsrs	r2, r2, #1
 8000fde:	3a01      	subs	r2, #1
 8000fe0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000fe4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000fea:	f7ff fabf 	bl	800056c <HAL_GetTick>
 8000fee:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ff0:	6823      	ldr	r3, [r4, #0]
 8000ff2:	019a      	lsls	r2, r3, #6
 8000ff4:	f53f aebc 	bmi.w	8000d70 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ff8:	f7ff fab8 	bl	800056c <HAL_GetTick>
 8000ffc:	1b40      	subs	r0, r0, r5
 8000ffe:	2802      	cmp	r0, #2
 8001000:	d9f6      	bls.n	8000ff0 <HAL_RCC_OscConfig+0x2b4>
 8001002:	e6e2      	b.n	8000dca <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001004:	f7ff fab2 	bl	800056c <HAL_GetTick>
 8001008:	1bc0      	subs	r0, r0, r7
 800100a:	2802      	cmp	r0, #2
 800100c:	d9d8      	bls.n	8000fc0 <HAL_RCC_OscConfig+0x284>
 800100e:	e6dc      	b.n	8000dca <HAL_RCC_OscConfig+0x8e>
 8001010:	40023800 	.word	0x40023800
 8001014:	42470000 	.word	0x42470000
 8001018:	42470e80 	.word	0x42470e80
 800101c:	40007000 	.word	0x40007000
 8001020:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8001024:	f7ff faa2 	bl	800056c <HAL_GetTick>
 8001028:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800102a:	682b      	ldr	r3, [r5, #0]
 800102c:	019b      	lsls	r3, r3, #6
 800102e:	f57f ae9f 	bpl.w	8000d70 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001032:	f7ff fa9b 	bl	800056c <HAL_GetTick>
 8001036:	1b00      	subs	r0, r0, r4
 8001038:	2802      	cmp	r0, #2
 800103a:	d9f6      	bls.n	800102a <HAL_RCC_OscConfig+0x2ee>
 800103c:	e6c5      	b.n	8000dca <HAL_RCC_OscConfig+0x8e>
 800103e:	bf00      	nop

08001040 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001040:	4913      	ldr	r1, [pc, #76]	; (8001090 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001042:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001044:	688b      	ldr	r3, [r1, #8]
 8001046:	f003 030c 	and.w	r3, r3, #12
 800104a:	2b04      	cmp	r3, #4
 800104c:	d003      	beq.n	8001056 <HAL_RCC_GetSysClockFreq+0x16>
 800104e:	2b08      	cmp	r3, #8
 8001050:	d003      	beq.n	800105a <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001052:	4810      	ldr	r0, [pc, #64]	; (8001094 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001054:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001056:	4810      	ldr	r0, [pc, #64]	; (8001098 <HAL_RCC_GetSysClockFreq+0x58>)
 8001058:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800105a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800105c:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800105e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001060:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001064:	bf14      	ite	ne
 8001066:	480c      	ldrne	r0, [pc, #48]	; (8001098 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001068:	480a      	ldreq	r0, [pc, #40]	; (8001094 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800106a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800106e:	bf18      	it	ne
 8001070:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001072:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001076:	fba1 0100 	umull	r0, r1, r1, r0
 800107a:	f7ff f8a5 	bl	80001c8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800107e:	4b04      	ldr	r3, [pc, #16]	; (8001090 <HAL_RCC_GetSysClockFreq+0x50>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001086:	3301      	adds	r3, #1
 8001088:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800108a:	fbb0 f0f3 	udiv	r0, r0, r3
 800108e:	bd08      	pop	{r3, pc}
 8001090:	40023800 	.word	0x40023800
 8001094:	00f42400 	.word	0x00f42400
 8001098:	007a1200 	.word	0x007a1200

0800109c <HAL_RCC_ClockConfig>:
{
 800109c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010a0:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80010a2:	4604      	mov	r4, r0
 80010a4:	b910      	cbnz	r0, 80010ac <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80010a6:	2001      	movs	r0, #1
 80010a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010ac:	4b44      	ldr	r3, [pc, #272]	; (80011c0 <HAL_RCC_ClockConfig+0x124>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	f002 020f 	and.w	r2, r2, #15
 80010b4:	428a      	cmp	r2, r1
 80010b6:	d328      	bcc.n	800110a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010b8:	6821      	ldr	r1, [r4, #0]
 80010ba:	078f      	lsls	r7, r1, #30
 80010bc:	d42d      	bmi.n	800111a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010be:	07c8      	lsls	r0, r1, #31
 80010c0:	d440      	bmi.n	8001144 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80010c2:	4b3f      	ldr	r3, [pc, #252]	; (80011c0 <HAL_RCC_ClockConfig+0x124>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	f002 020f 	and.w	r2, r2, #15
 80010ca:	4295      	cmp	r5, r2
 80010cc:	d366      	bcc.n	800119c <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010ce:	6822      	ldr	r2, [r4, #0]
 80010d0:	0751      	lsls	r1, r2, #29
 80010d2:	d46c      	bmi.n	80011ae <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010d4:	0713      	lsls	r3, r2, #28
 80010d6:	d507      	bpl.n	80010e8 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80010d8:	4a3a      	ldr	r2, [pc, #232]	; (80011c4 <HAL_RCC_ClockConfig+0x128>)
 80010da:	6921      	ldr	r1, [r4, #16]
 80010dc:	6893      	ldr	r3, [r2, #8]
 80010de:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80010e2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80010e6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010e8:	f7ff ffaa 	bl	8001040 <HAL_RCC_GetSysClockFreq>
 80010ec:	4b35      	ldr	r3, [pc, #212]	; (80011c4 <HAL_RCC_ClockConfig+0x128>)
 80010ee:	4a36      	ldr	r2, [pc, #216]	; (80011c8 <HAL_RCC_ClockConfig+0x12c>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80010f6:	5cd3      	ldrb	r3, [r2, r3]
 80010f8:	40d8      	lsrs	r0, r3
 80010fa:	4b34      	ldr	r3, [pc, #208]	; (80011cc <HAL_RCC_ClockConfig+0x130>)
 80010fc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80010fe:	2000      	movs	r0, #0
 8001100:	f7ff f9ea 	bl	80004d8 <HAL_InitTick>
  return HAL_OK;
 8001104:	2000      	movs	r0, #0
 8001106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800110a:	b2ca      	uxtb	r2, r1
 800110c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 030f 	and.w	r3, r3, #15
 8001114:	4299      	cmp	r1, r3
 8001116:	d1c6      	bne.n	80010a6 <HAL_RCC_ClockConfig+0xa>
 8001118:	e7ce      	b.n	80010b8 <HAL_RCC_ClockConfig+0x1c>
 800111a:	4b2a      	ldr	r3, [pc, #168]	; (80011c4 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800111c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001120:	bf1e      	ittt	ne
 8001122:	689a      	ldrne	r2, [r3, #8]
 8001124:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001128:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800112a:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800112c:	bf42      	ittt	mi
 800112e:	689a      	ldrmi	r2, [r3, #8]
 8001130:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001134:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001136:	689a      	ldr	r2, [r3, #8]
 8001138:	68a0      	ldr	r0, [r4, #8]
 800113a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800113e:	4302      	orrs	r2, r0
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	e7bc      	b.n	80010be <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001144:	6862      	ldr	r2, [r4, #4]
 8001146:	4b1f      	ldr	r3, [pc, #124]	; (80011c4 <HAL_RCC_ClockConfig+0x128>)
 8001148:	2a01      	cmp	r2, #1
 800114a:	d11d      	bne.n	8001188 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001152:	d0a8      	beq.n	80010a6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001154:	4e1b      	ldr	r6, [pc, #108]	; (80011c4 <HAL_RCC_ClockConfig+0x128>)
 8001156:	68b3      	ldr	r3, [r6, #8]
 8001158:	f023 0303 	bic.w	r3, r3, #3
 800115c:	4313      	orrs	r3, r2
 800115e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001160:	f7ff fa04 	bl	800056c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001164:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001168:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800116a:	68b3      	ldr	r3, [r6, #8]
 800116c:	6862      	ldr	r2, [r4, #4]
 800116e:	f003 030c 	and.w	r3, r3, #12
 8001172:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001176:	d0a4      	beq.n	80010c2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001178:	f7ff f9f8 	bl	800056c <HAL_GetTick>
 800117c:	1bc0      	subs	r0, r0, r7
 800117e:	4540      	cmp	r0, r8
 8001180:	d9f3      	bls.n	800116a <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001182:	2003      	movs	r0, #3
}
 8001184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001188:	1e91      	subs	r1, r2, #2
 800118a:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800118c:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800118e:	d802      	bhi.n	8001196 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001190:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001194:	e7dd      	b.n	8001152 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001196:	f013 0f02 	tst.w	r3, #2
 800119a:	e7da      	b.n	8001152 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800119c:	b2ea      	uxtb	r2, r5
 800119e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	429d      	cmp	r5, r3
 80011a8:	f47f af7d 	bne.w	80010a6 <HAL_RCC_ClockConfig+0xa>
 80011ac:	e78f      	b.n	80010ce <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011ae:	4905      	ldr	r1, [pc, #20]	; (80011c4 <HAL_RCC_ClockConfig+0x128>)
 80011b0:	68e0      	ldr	r0, [r4, #12]
 80011b2:	688b      	ldr	r3, [r1, #8]
 80011b4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80011b8:	4303      	orrs	r3, r0
 80011ba:	608b      	str	r3, [r1, #8]
 80011bc:	e78a      	b.n	80010d4 <HAL_RCC_ClockConfig+0x38>
 80011be:	bf00      	nop
 80011c0:	40023c00 	.word	0x40023c00
 80011c4:	40023800 	.word	0x40023800
 80011c8:	08001ea6 	.word	0x08001ea6
 80011cc:	20000008 	.word	0x20000008

080011d0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80011d0:	4b01      	ldr	r3, [pc, #4]	; (80011d8 <HAL_RCC_GetHCLKFreq+0x8>)
 80011d2:	6818      	ldr	r0, [r3, #0]
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	20000008 	.word	0x20000008

080011dc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80011dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 80011de:	481d      	ldr	r0, [pc, #116]	; (8001254 <MX_ADC1_Init+0x78>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011e0:	4a1d      	ldr	r2, [pc, #116]	; (8001258 <MX_ADC1_Init+0x7c>)
  hadc1.Init.ScanConvMode = ENABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = ENABLE;
  hadc1.Init.NbrOfDiscConversion = 1;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011e2:	491e      	ldr	r1, [pc, #120]	; (800125c <MX_ADC1_Init+0x80>)
 80011e4:	6281      	str	r1, [r0, #40]	; 0x28
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011ea:	e880 000c 	stmia.w	r0, {r2, r3}
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 2;
 80011ee:	2102      	movs	r1, #2
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011f0:	2300      	movs	r3, #0
  hadc1.Init.ScanConvMode = ENABLE;
 80011f2:	2201      	movs	r2, #1
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011f4:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80011f6:	6102      	str	r2, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011f8:	6183      	str	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 80011fa:	6202      	str	r2, [r0, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 80011fc:	6242      	str	r2, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011fe:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001200:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001202:	61c1      	str	r1, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001204:	6303      	str	r3, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001206:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001208:	f7ff f9b6 	bl	8000578 <HAL_ADC_Init>
 800120c:	b118      	cbz	r0, 8001216 <MX_ADC1_Init+0x3a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800120e:	214b      	movs	r1, #75	; 0x4b
 8001210:	4813      	ldr	r0, [pc, #76]	; (8001260 <MX_ADC1_Init+0x84>)
 8001212:	f000 fc57 	bl	8001ac4 <_Error_Handler>

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_3;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001216:	2003      	movs	r0, #3
 8001218:	2101      	movs	r1, #1
 800121a:	2300      	movs	r3, #0
 800121c:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001220:	4669      	mov	r1, sp
 8001222:	480c      	ldr	r0, [pc, #48]	; (8001254 <MX_ADC1_Init+0x78>)
 8001224:	f7ff fb1e 	bl	8000864 <HAL_ADC_ConfigChannel>
 8001228:	b118      	cbz	r0, 8001232 <MX_ADC1_Init+0x56>
  {
    _Error_Handler(__FILE__, __LINE__);
 800122a:	2155      	movs	r1, #85	; 0x55
 800122c:	480c      	ldr	r0, [pc, #48]	; (8001260 <MX_ADC1_Init+0x84>)
 800122e:	f000 fc49 	bl	8001ac4 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_4;
  sConfig.Rank = 2;
 8001232:	2204      	movs	r2, #4
 8001234:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001236:	4669      	mov	r1, sp
 8001238:	4806      	ldr	r0, [pc, #24]	; (8001254 <MX_ADC1_Init+0x78>)
  sConfig.Rank = 2;
 800123a:	e88d 000c 	stmia.w	sp, {r2, r3}
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800123e:	f7ff fb11 	bl	8000864 <HAL_ADC_ConfigChannel>
 8001242:	b118      	cbz	r0, 800124c <MX_ADC1_Init+0x70>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001244:	215e      	movs	r1, #94	; 0x5e
 8001246:	4806      	ldr	r0, [pc, #24]	; (8001260 <MX_ADC1_Init+0x84>)
 8001248:	f000 fc3c 	bl	8001ac4 <_Error_Handler>
  }

}
 800124c:	b005      	add	sp, #20
 800124e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001252:	bf00      	nop
 8001254:	200000e4 	.word	0x200000e4
 8001258:	40012000 	.word	0x40012000
 800125c:	0f000001 	.word	0x0f000001
 8001260:	08001e8c 	.word	0x08001e8c

08001264 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001264:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc2.Instance = ADC2;
 8001266:	4815      	ldr	r0, [pc, #84]	; (80012bc <MX_ADC2_Init+0x58>)
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001268:	4a15      	ldr	r2, [pc, #84]	; (80012c0 <MX_ADC2_Init+0x5c>)
 800126a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800126e:	e880 000c 	stmia.w	r0, {r2, r3}
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
  hadc2.Init.ScanConvMode = DISABLE;
  hadc2.Init.ContinuousConvMode = DISABLE;
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001272:	4a14      	ldr	r2, [pc, #80]	; (80012c4 <MX_ADC2_Init+0x60>)
 8001274:	6282      	str	r2, [r0, #40]	; 0x28
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001276:	2300      	movs	r3, #0
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.NbrOfConversion = 1;
 8001278:	2201      	movs	r2, #1
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800127a:	6083      	str	r3, [r0, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800127c:	6103      	str	r3, [r0, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800127e:	6183      	str	r3, [r0, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001280:	6203      	str	r3, [r0, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001282:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001284:	60c3      	str	r3, [r0, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001286:	61c2      	str	r2, [r0, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001288:	6303      	str	r3, [r0, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800128a:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800128c:	f7ff f974 	bl	8000578 <HAL_ADC_Init>
 8001290:	b118      	cbz	r0, 800129a <MX_ADC2_Init+0x36>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001292:	2177      	movs	r1, #119	; 0x77
 8001294:	480c      	ldr	r0, [pc, #48]	; (80012c8 <MX_ADC2_Init+0x64>)
 8001296:	f000 fc15 	bl	8001ac4 <_Error_Handler>

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_5;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800129a:	2105      	movs	r1, #5
 800129c:	2201      	movs	r2, #1
 800129e:	2300      	movs	r3, #0
 80012a0:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80012a4:	4805      	ldr	r0, [pc, #20]	; (80012bc <MX_ADC2_Init+0x58>)
 80012a6:	4669      	mov	r1, sp
 80012a8:	f7ff fadc 	bl	8000864 <HAL_ADC_ConfigChannel>
 80012ac:	b118      	cbz	r0, 80012b6 <MX_ADC2_Init+0x52>
  {
    _Error_Handler(__FILE__, __LINE__);
 80012ae:	2181      	movs	r1, #129	; 0x81
 80012b0:	4805      	ldr	r0, [pc, #20]	; (80012c8 <MX_ADC2_Init+0x64>)
 80012b2:	f000 fc07 	bl	8001ac4 <_Error_Handler>
  }

}
 80012b6:	b005      	add	sp, #20
 80012b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80012bc:	2000009c 	.word	0x2000009c
 80012c0:	40012100 	.word	0x40012100
 80012c4:	0f000001 	.word	0x0f000001
 80012c8:	08001e8c 	.word	0x08001e8c

080012cc <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80012cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc3.Instance = ADC3;
 80012ce:	481b      	ldr	r0, [pc, #108]	; (800133c <MX_ADC3_Init+0x70>)
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012d0:	4b1b      	ldr	r3, [pc, #108]	; (8001340 <MX_ADC3_Init+0x74>)
  hadc3.Init.ScanConvMode = ENABLE;
  hadc3.Init.ContinuousConvMode = DISABLE;
  hadc3.Init.DiscontinuousConvMode = ENABLE;
  hadc3.Init.NbrOfDiscConversion = 1;
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012d2:	4a1c      	ldr	r2, [pc, #112]	; (8001344 <MX_ADC3_Init+0x78>)
 80012d4:	6282      	str	r2, [r0, #40]	; 0x28
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012d6:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 80012da:	e880 0018 	stmia.w	r0, {r3, r4}
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc3.Init.NbrOfConversion = 2;
 80012de:	2202      	movs	r2, #2
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80012e0:	2300      	movs	r3, #0
  hadc3.Init.ScanConvMode = ENABLE;
 80012e2:	2401      	movs	r4, #1
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80012e4:	6083      	str	r3, [r0, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 80012e6:	6104      	str	r4, [r0, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80012e8:	6183      	str	r3, [r0, #24]
  hadc3.Init.DiscontinuousConvMode = ENABLE;
 80012ea:	6204      	str	r4, [r0, #32]
  hadc3.Init.NbrOfDiscConversion = 1;
 80012ec:	6244      	str	r4, [r0, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012ee:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012f0:	60c3      	str	r3, [r0, #12]
  hadc3.Init.NbrOfConversion = 2;
 80012f2:	61c2      	str	r2, [r0, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80012f4:	6303      	str	r3, [r0, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012f6:	6144      	str	r4, [r0, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80012f8:	f7ff f93e 	bl	8000578 <HAL_ADC_Init>
 80012fc:	b118      	cbz	r0, 8001306 <MX_ADC3_Init+0x3a>
  {
    _Error_Handler(__FILE__, __LINE__);
 80012fe:	219b      	movs	r1, #155	; 0x9b
 8001300:	4811      	ldr	r0, [pc, #68]	; (8001348 <MX_ADC3_Init+0x7c>)
 8001302:	f000 fbdf 	bl	8001ac4 <_Error_Handler>

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001306:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001308:	4669      	mov	r1, sp
 800130a:	480c      	ldr	r0, [pc, #48]	; (800133c <MX_ADC3_Init+0x70>)
  sConfig.Channel = ADC_CHANNEL_1;
 800130c:	9400      	str	r4, [sp, #0]
  sConfig.Rank = 1;
 800130e:	9401      	str	r4, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001310:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001312:	f7ff faa7 	bl	8000864 <HAL_ADC_ConfigChannel>
 8001316:	b118      	cbz	r0, 8001320 <MX_ADC3_Init+0x54>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001318:	21a5      	movs	r1, #165	; 0xa5
 800131a:	480b      	ldr	r0, [pc, #44]	; (8001348 <MX_ADC3_Init+0x7c>)
 800131c:	f000 fbd2 	bl	8001ac4 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_2;
 8001320:	2302      	movs	r3, #2
  sConfig.Rank = 2;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001322:	4669      	mov	r1, sp
 8001324:	4805      	ldr	r0, [pc, #20]	; (800133c <MX_ADC3_Init+0x70>)
  sConfig.Channel = ADC_CHANNEL_2;
 8001326:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 2;
 8001328:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800132a:	f7ff fa9b 	bl	8000864 <HAL_ADC_ConfigChannel>
 800132e:	b118      	cbz	r0, 8001338 <MX_ADC3_Init+0x6c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001330:	21ae      	movs	r1, #174	; 0xae
 8001332:	4805      	ldr	r0, [pc, #20]	; (8001348 <MX_ADC3_Init+0x7c>)
 8001334:	f000 fbc6 	bl	8001ac4 <_Error_Handler>
  }

}
 8001338:	b004      	add	sp, #16
 800133a:	bd10      	pop	{r4, pc}
 800133c:	2000012c 	.word	0x2000012c
 8001340:	40012200 	.word	0x40012200
 8001344:	0f000001 	.word	0x0f000001
 8001348:	08001e8c 	.word	0x08001e8c

0800134c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800134c:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 800134e:	6803      	ldr	r3, [r0, #0]
 8001350:	4a1e      	ldr	r2, [pc, #120]	; (80013cc <HAL_ADC_MspInit+0x80>)
 8001352:	4293      	cmp	r3, r2
{
 8001354:	b089      	sub	sp, #36	; 0x24
  if(adcHandle->Instance==ADC1)
 8001356:	d117      	bne.n	8001388 <HAL_ADC_MspInit+0x3c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001358:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <HAL_ADC_MspInit+0x84>)
 800135a:	2100      	movs	r1, #0
 800135c:	9100      	str	r1, [sp, #0]
 800135e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001360:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001364:	645a      	str	r2, [r3, #68]	; 0x44
 8001366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800136c:	9300      	str	r3, [sp, #0]
 800136e:	9b00      	ldr	r3, [sp, #0]
  
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001370:	2318      	movs	r3, #24
  
    /**ADC3 GPIO Configuration    
    PA1     ------> ADC3_IN1
    PA2     ------> ADC3_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001372:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	9105      	str	r1, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001376:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001378:	a903      	add	r1, sp, #12
 800137a:	4816      	ldr	r0, [pc, #88]	; (80013d4 <HAL_ADC_MspInit+0x88>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800137c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137e:	f7ff fbf1 	bl	8000b64 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001382:	b009      	add	sp, #36	; 0x24
 8001384:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(adcHandle->Instance==ADC2)
 8001388:	4a13      	ldr	r2, [pc, #76]	; (80013d8 <HAL_ADC_MspInit+0x8c>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d10d      	bne.n	80013aa <HAL_ADC_MspInit+0x5e>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800138e:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <HAL_ADC_MspInit+0x84>)
 8001390:	2100      	movs	r1, #0
 8001392:	9101      	str	r1, [sp, #4]
 8001394:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800139a:	645a      	str	r2, [r3, #68]	; 0x44
 800139c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013a2:	9301      	str	r3, [sp, #4]
 80013a4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80013a6:	2320      	movs	r3, #32
 80013a8:	e7e3      	b.n	8001372 <HAL_ADC_MspInit+0x26>
  else if(adcHandle->Instance==ADC3)
 80013aa:	4a0c      	ldr	r2, [pc, #48]	; (80013dc <HAL_ADC_MspInit+0x90>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d1e8      	bne.n	8001382 <HAL_ADC_MspInit+0x36>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80013b0:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <HAL_ADC_MspInit+0x84>)
 80013b2:	2100      	movs	r1, #0
 80013b4:	9102      	str	r1, [sp, #8]
 80013b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80013b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80013bc:	645a      	str	r2, [r3, #68]	; 0x44
 80013be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013c4:	9302      	str	r3, [sp, #8]
 80013c6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80013c8:	2306      	movs	r3, #6
 80013ca:	e7d2      	b.n	8001372 <HAL_ADC_MspInit+0x26>
 80013cc:	40012000 	.word	0x40012000
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40020000 	.word	0x40020000
 80013d8:	40012100 	.word	0x40012100
 80013dc:	40012200 	.word	0x40012200

080013e0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80013e0:	b508      	push	{r3, lr}

  hcan1.Instance = CAN1;
 80013e2:	480f      	ldr	r0, [pc, #60]	; (8001420 <MX_CAN1_Init+0x40>)
  hcan1.Init.Prescaler = 21;
 80013e4:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <MX_CAN1_Init+0x44>)
  hcan1.Init.Mode = CAN_MODE_NORMAL;
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80013e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  hcan1.Init.Prescaler = 21;
 80013ea:	f04f 0e15 	mov.w	lr, #21
 80013ee:	e880 4008 	stmia.w	r0, {r3, lr}
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80013f2:	6102      	str	r2, [r0, #16]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80013f4:	2300      	movs	r3, #0
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80013f6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80013fa:	6083      	str	r3, [r0, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80013fc:	60c3      	str	r3, [r0, #12]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80013fe:	6142      	str	r2, [r0, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001400:	7603      	strb	r3, [r0, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001402:	7643      	strb	r3, [r0, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001404:	7683      	strb	r3, [r0, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001406:	76c3      	strb	r3, [r0, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001408:	7703      	strb	r3, [r0, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800140a:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800140c:	f7ff fac0 	bl	8000990 <HAL_CAN_Init>
 8001410:	b128      	cbz	r0, 800141e <MX_CAN1_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001412:	2145      	movs	r1, #69	; 0x45
 8001414:	4804      	ldr	r0, [pc, #16]	; (8001428 <MX_CAN1_Init+0x48>)
  }

}
 8001416:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 800141a:	f000 bb53 	b.w	8001ac4 <_Error_Handler>
 800141e:	bd08      	pop	{r3, pc}
 8001420:	20000174 	.word	0x20000174
 8001424:	40006400 	.word	0x40006400
 8001428:	08001e99 	.word	0x08001e99

0800142c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800142c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(canHandle->Instance==CAN1)
 800142e:	6802      	ldr	r2, [r0, #0]
 8001430:	4b10      	ldr	r3, [pc, #64]	; (8001474 <HAL_CAN_MspInit+0x48>)
 8001432:	429a      	cmp	r2, r3
 8001434:	d11a      	bne.n	800146c <HAL_CAN_MspInit+0x40>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001436:	2100      	movs	r1, #0
 8001438:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800143c:	9100      	str	r1, [sp, #0]
 800143e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001440:	480d      	ldr	r0, [pc, #52]	; (8001478 <HAL_CAN_MspInit+0x4c>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001442:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001446:	641a      	str	r2, [r3, #64]	; 0x40
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	9103      	str	r1, [sp, #12]
    __HAL_RCC_CAN1_CLK_ENABLE();
 800144c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001454:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001458:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	2302      	movs	r3, #2
 800145c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145e:	2303      	movs	r3, #3
 8001460:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001462:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001464:	2309      	movs	r3, #9
 8001466:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001468:	f7ff fb7c 	bl	8000b64 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800146c:	b007      	add	sp, #28
 800146e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001472:	bf00      	nop
 8001474:	40006400 	.word	0x40006400
 8001478:	40020000 	.word	0x40020000

0800147c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800147c:	b530      	push	{r4, r5, lr}
 800147e:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001480:	4b21      	ldr	r3, [pc, #132]	; (8001508 <MX_GPIO_Init+0x8c>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8001482:	4d22      	ldr	r5, [pc, #136]	; (800150c <MX_GPIO_Init+0x90>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001484:	2400      	movs	r4, #0
 8001486:	9401      	str	r4, [sp, #4]
 8001488:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800148a:	f042 0210 	orr.w	r2, r2, #16
 800148e:	631a      	str	r2, [r3, #48]	; 0x30
 8001490:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001492:	f002 0210 	and.w	r2, r2, #16
 8001496:	9201      	str	r2, [sp, #4]
 8001498:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800149a:	9402      	str	r4, [sp, #8]
 800149c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800149e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80014a2:	631a      	str	r2, [r3, #48]	; 0x30
 80014a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014a6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80014aa:	9202      	str	r2, [sp, #8]
 80014ac:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ae:	9403      	str	r4, [sp, #12]
 80014b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014b2:	f042 0201 	orr.w	r2, r2, #1
 80014b6:	631a      	str	r2, [r3, #48]	; 0x30
 80014b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014ba:	f002 0201 	and.w	r2, r2, #1
 80014be:	9203      	str	r2, [sp, #12]
 80014c0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c2:	9404      	str	r4, [sp, #16]
 80014c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014c6:	f042 0202 	orr.w	r2, r2, #2
 80014ca:	631a      	str	r2, [r3, #48]	; 0x30
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 80014d2:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d4:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 80014d6:	4628      	mov	r0, r5
 80014d8:	213f      	movs	r1, #63	; 0x3f
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014da:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 80014dc:	f7ff fc28 	bl	8000d30 <HAL_GPIO_WritePin>
                          |GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 
                           PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 80014e0:	233f      	movs	r3, #63	; 0x3f
 80014e2:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014e4:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e6:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014e8:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ea:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ee:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014f0:	f7ff fb38 	bl	8000b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014f4:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f6:	a905      	add	r1, sp, #20
 80014f8:	4805      	ldr	r0, [pc, #20]	; (8001510 <MX_GPIO_Init+0x94>)
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014fa:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014fc:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001500:	f7ff fb30 	bl	8000b64 <HAL_GPIO_Init>

}
 8001504:	b00b      	add	sp, #44	; 0x2c
 8001506:	bd30      	pop	{r4, r5, pc}
 8001508:	40023800 	.word	0x40023800
 800150c:	40021000 	.word	0x40021000
 8001510:	40020400 	.word	0x40020400

08001514 <readApps>:
	can_sendThrottle();
}

// #--------------------------# READ ADC FUNCTIONS #---------------------------#

void readApps(ADC_HandleTypeDef hadc) {
 8001514:	b084      	sub	sp, #16
 8001516:	b508      	push	{r3, lr}
 8001518:	f10d 0e08 	add.w	lr, sp, #8
 800151c:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
	// Run first conversin on the APPS ADC group
    HAL_ADC_Start(&hadc);
 8001520:	4670      	mov	r0, lr
 8001522:	f7ff f8cd 	bl	80006c0 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY) == HAL_OK) {
 8001526:	f04f 31ff 	mov.w	r1, #4294967295
 800152a:	a802      	add	r0, sp, #8
 800152c:	f7ff f946 	bl	80007bc <HAL_ADC_PollForConversion>
 8001530:	b920      	cbnz	r0, 800153c <readApps+0x28>
        // Read APPS1
        sensors.apps1 = HAL_ADC_GetValue(&hadc);
 8001532:	a802      	add	r0, sp, #8
 8001534:	f7ff f992 	bl	800085c <HAL_ADC_GetValue>
 8001538:	4b0c      	ldr	r3, [pc, #48]	; (800156c <readApps+0x58>)
 800153a:	8018      	strh	r0, [r3, #0]
    }
    HAL_ADC_Stop(&hadc);
 800153c:	a802      	add	r0, sp, #8
 800153e:	f7ff f91f 	bl	8000780 <HAL_ADC_Stop>

    // Run a second conversino on the same ADC (second channel)
    HAL_ADC_Start(&hadc);
 8001542:	a802      	add	r0, sp, #8
 8001544:	f7ff f8bc 	bl	80006c0 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY) == HAL_OK) {
 8001548:	f04f 31ff 	mov.w	r1, #4294967295
 800154c:	a802      	add	r0, sp, #8
 800154e:	f7ff f935 	bl	80007bc <HAL_ADC_PollForConversion>
 8001552:	b920      	cbnz	r0, 800155e <readApps+0x4a>
    	// Read APPS2
        sensors.apps2 = HAL_ADC_GetValue(&hadc);
 8001554:	a802      	add	r0, sp, #8
 8001556:	f7ff f981 	bl	800085c <HAL_ADC_GetValue>
 800155a:	4b04      	ldr	r3, [pc, #16]	; (800156c <readApps+0x58>)
 800155c:	8058      	strh	r0, [r3, #2]
    }
    HAL_ADC_Stop(&hadc);
 800155e:	a802      	add	r0, sp, #8
 8001560:	f7ff f90e 	bl	8000780 <HAL_ADC_Stop>
}
 8001564:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001568:	b004      	add	sp, #16
 800156a:	4770      	bx	lr
 800156c:	2000019c 	.word	0x2000019c

08001570 <readBse>:


void readBse(ADC_HandleTypeDef hadc) {
 8001570:	b084      	sub	sp, #16
 8001572:	b508      	push	{r3, lr}
 8001574:	f10d 0e08 	add.w	lr, sp, #8
 8001578:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
	// Run first conversion on the BSE ADC group
	HAL_ADC_Start(&hadc);
 800157c:	4670      	mov	r0, lr
 800157e:	f7ff f89f 	bl	80006c0 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY) == HAL_OK) {
 8001582:	f04f 31ff 	mov.w	r1, #4294967295
 8001586:	a802      	add	r0, sp, #8
 8001588:	f7ff f918 	bl	80007bc <HAL_ADC_PollForConversion>
 800158c:	b920      	cbnz	r0, 8001598 <readBse+0x28>
		// Read BSE1
		sensors.bse1 = HAL_ADC_GetValue(&hadc);
 800158e:	a802      	add	r0, sp, #8
 8001590:	f7ff f964 	bl	800085c <HAL_ADC_GetValue>
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <readBse+0x58>)
 8001596:	8098      	strh	r0, [r3, #4]
	}
	HAL_ADC_Stop(&hadc);
 8001598:	a802      	add	r0, sp, #8
 800159a:	f7ff f8f1 	bl	8000780 <HAL_ADC_Stop>

	// Run a second conversion on the same ADC (second channel)
	HAL_ADC_Start(&hadc);
 800159e:	a802      	add	r0, sp, #8
 80015a0:	f7ff f88e 	bl	80006c0 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY) == HAL_OK) {
 80015a4:	f04f 31ff 	mov.w	r1, #4294967295
 80015a8:	a802      	add	r0, sp, #8
 80015aa:	f7ff f907 	bl	80007bc <HAL_ADC_PollForConversion>
 80015ae:	b920      	cbnz	r0, 80015ba <readBse+0x4a>
		// Read BSE2
		sensors.bse2 = HAL_ADC_GetValue(&hadc);
 80015b0:	a802      	add	r0, sp, #8
 80015b2:	f7ff f953 	bl	800085c <HAL_ADC_GetValue>
 80015b6:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <readBse+0x58>)
 80015b8:	80d8      	strh	r0, [r3, #6]
	}
	HAL_ADC_Stop(&hadc);
 80015ba:	a802      	add	r0, sp, #8
 80015bc:	f7ff f8e0 	bl	8000780 <HAL_ADC_Stop>
}
 80015c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80015c4:	b004      	add	sp, #16
 80015c6:	4770      	bx	lr
 80015c8:	2000019c 	.word	0x2000019c

080015cc <readCurr>:


void readCurr(ADC_HandleTypeDef hadc) {
 80015cc:	b084      	sub	sp, #16
 80015ce:	b508      	push	{r3, lr}
 80015d0:	f10d 0e08 	add.w	lr, sp, #8
 80015d4:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    HAL_ADC_Start(&hadc);
 80015d8:	4670      	mov	r0, lr
 80015da:	f7ff f871 	bl	80006c0 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc, 100000) == HAL_OK) {
 80015de:	4908      	ldr	r1, [pc, #32]	; (8001600 <readCurr+0x34>)
 80015e0:	a802      	add	r0, sp, #8
 80015e2:	f7ff f8eb 	bl	80007bc <HAL_ADC_PollForConversion>
 80015e6:	b920      	cbnz	r0, 80015f2 <readCurr+0x26>
        sensors.currSensor = HAL_ADC_GetValue(&hadc);
 80015e8:	a802      	add	r0, sp, #8
 80015ea:	f7ff f937 	bl	800085c <HAL_ADC_GetValue>
 80015ee:	4b05      	ldr	r3, [pc, #20]	; (8001604 <readCurr+0x38>)
 80015f0:	8118      	strh	r0, [r3, #8]
    }
    HAL_ADC_Stop(&hadc);
 80015f2:	a802      	add	r0, sp, #8
 80015f4:	f7ff f8c4 	bl	8000780 <HAL_ADC_Stop>
}
 80015f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80015fc:	b004      	add	sp, #16
 80015fe:	4770      	bx	lr
 8001600:	000186a0 	.word	0x000186a0
 8001604:	2000019c 	.word	0x2000019c

08001608 <filterApps>:
// Filter both APPS readings
void filterApps() {
    // Compute new value - if there is a huge difference, then assert the
    // previous value but store it so that it can be compared with the
    // reading from the next iteration. Else, the new value goes through.
	uint16_t newApps1 = sensors.apps1;
 8001608:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <filterApps+0x30>)
 800160a:	8819      	ldrh	r1, [r3, #0]
	if (abs(sensors.apps1 - sensors.prevApps1) > APPS_VAL_THRESH)
 800160c:	8958      	ldrh	r0, [r3, #10]
		sensors.apps1 = sensors.prevApps1;
	// Update old value for next iteration
	sensors.prevApps1 = newApps1;
 800160e:	8159      	strh	r1, [r3, #10]
	if (abs(sensors.apps1 - sensors.prevApps1) > APPS_VAL_THRESH)
 8001610:	1a0a      	subs	r2, r1, r0
 8001612:	2a00      	cmp	r2, #0
 8001614:	bfb8      	it	lt
 8001616:	4252      	neglt	r2, r2
 8001618:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8

	uint16_t newApps2 = sensors.apps2;
 800161c:	8859      	ldrh	r1, [r3, #2]
		sensors.apps1 = sensors.prevApps1;
 800161e:	bfc8      	it	gt
 8001620:	8018      	strhgt	r0, [r3, #0]
		if (abs(sensors.apps2 - sensors.prevApps2) > APPS_VAL_THRESH)
 8001622:	8998      	ldrh	r0, [r3, #12]
			sensors.apps2 = sensors.prevApps2;
		// Update old value for next iteration
		sensors.prevApps2 = newApps2;
 8001624:	8199      	strh	r1, [r3, #12]
		if (abs(sensors.apps2 - sensors.prevApps2) > APPS_VAL_THRESH)
 8001626:	1a0a      	subs	r2, r1, r0
 8001628:	2a00      	cmp	r2, #0
 800162a:	bfb8      	it	lt
 800162c:	4252      	neglt	r2, r2
 800162e:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
			sensors.apps2 = sensors.prevApps2;
 8001632:	bfc8      	it	gt
 8001634:	8058      	strhgt	r0, [r3, #2]
		sensors.prevApps2 = newApps2;
 8001636:	4770      	bx	lr
 8001638:	2000019c 	.word	0x2000019c

0800163c <filterBse>:
// Filter a single BSE reading
void filterBse() {
    // Compute new value - if there is a huge difference, then assert the
    // previous value but store it so that it can be compared with the
    // reading from the next iteration. Else, the new value goes through.
	uint16_t newBse1 = sensors.bse1;
 800163c:	4b0b      	ldr	r3, [pc, #44]	; (800166c <filterBse+0x30>)
 800163e:	8899      	ldrh	r1, [r3, #4]
	if (abs(sensors.bse1 - sensors.prevBse1) > BSE_VAL_THRESH)
 8001640:	89d8      	ldrh	r0, [r3, #14]
        sensors.bse1 = sensors.prevBse1;
    // Update old value for next iteration
    sensors.prevBse1 = newBse1;
 8001642:	81d9      	strh	r1, [r3, #14]
	if (abs(sensors.bse1 - sensors.prevBse1) > BSE_VAL_THRESH)
 8001644:	1a0a      	subs	r2, r1, r0
 8001646:	2a00      	cmp	r2, #0
 8001648:	bfb8      	it	lt
 800164a:	4252      	neglt	r2, r2
 800164c:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8

    uint16_t newBse2 = sensors.bse2;
 8001650:	88d9      	ldrh	r1, [r3, #6]
        sensors.bse1 = sensors.prevBse1;
 8001652:	bfc8      	it	gt
 8001654:	8098      	strhgt	r0, [r3, #4]
	if (abs(sensors.bse2 - sensors.prevBse2) > BSE_VAL_THRESH)
 8001656:	8a18      	ldrh	r0, [r3, #16]
		sensors.bse2 = sensors.prevBse2;
	// Update old value for next iteration
	sensors.prevBse2 = newBse2;
 8001658:	8219      	strh	r1, [r3, #16]
	if (abs(sensors.bse2 - sensors.prevBse2) > BSE_VAL_THRESH)
 800165a:	1a0a      	subs	r2, r1, r0
 800165c:	2a00      	cmp	r2, #0
 800165e:	bfb8      	it	lt
 8001660:	4252      	neglt	r2, r2
 8001662:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
		sensors.bse2 = sensors.prevBse2;
 8001666:	bfc8      	it	gt
 8001668:	80d8      	strhgt	r0, [r3, #6]
	sensors.prevBse2 = newBse2;
 800166a:	4770      	bx	lr
 800166c:	2000019c 	.word	0x2000019c

08001670 <filterCurr>:
// Filters the current sensor reading
void filterCurr() {
    // Compute new value - if there is a huge difference, then assert the
    // previous value but store it so that it can be compared with the
    // reading from the next iteration. Else, the new value goes through.
    uint16_t newCurr = sensors.currSensor;
 8001670:	4b06      	ldr	r3, [pc, #24]	; (800168c <filterCurr+0x1c>)
 8001672:	8919      	ldrh	r1, [r3, #8]
	if (abs(sensors.currSensor - sensors.prevCurr) > CURRSENSE_VAL_THRESH)
 8001674:	8a58      	ldrh	r0, [r3, #18]
    	sensors.currSensor = sensors.prevCurr;
    // Update old value for next iteration
    sensors.prevCurr = newCurr;
 8001676:	8259      	strh	r1, [r3, #18]
	if (abs(sensors.currSensor - sensors.prevCurr) > CURRSENSE_VAL_THRESH)
 8001678:	1a0a      	subs	r2, r1, r0
 800167a:	2a00      	cmp	r2, #0
 800167c:	bfb8      	it	lt
 800167e:	4252      	neglt	r2, r2
 8001680:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    	sensors.currSensor = sensors.prevCurr;
 8001684:	bfc8      	it	gt
 8001686:	8118      	strhgt	r0, [r3, #8]
    sensors.prevCurr = newCurr;
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	2000019c 	.word	0x2000019c

08001690 <scaleThrottle>:
}

void scaleThrottle() {
    sensors.throttle = (sensors.apps1 + sensors.apps2) / 2;
 8001690:	4a03      	ldr	r2, [pc, #12]	; (80016a0 <scaleThrottle+0x10>)
 8001692:	8813      	ldrh	r3, [r2, #0]
 8001694:	8851      	ldrh	r1, [r2, #2]
 8001696:	440b      	add	r3, r1
 8001698:	105b      	asrs	r3, r3, #1
 800169a:	8293      	strh	r3, [r2, #20]
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	2000019c 	.word	0x2000019c

080016a4 <scaleBrake>:
}

void scaleBrake() {
    sensors.brake = (sensors.bse1 + sensors.bse2) / 2;
 80016a4:	4a03      	ldr	r2, [pc, #12]	; (80016b4 <scaleBrake+0x10>)
 80016a6:	8893      	ldrh	r3, [r2, #4]
 80016a8:	88d1      	ldrh	r1, [r2, #6]
 80016aa:	440b      	add	r3, r1
 80016ac:	105b      	asrs	r3, r3, #1
 80016ae:	82d3      	strh	r3, [r2, #22]
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	2000019c 	.word	0x2000019c

080016b8 <scaleCurrent>:
}

void scaleCurrent() {
    sensors.current = sensors.currSensor;
 80016b8:	4b01      	ldr	r3, [pc, #4]	; (80016c0 <scaleCurrent+0x8>)
 80016ba:	891a      	ldrh	r2, [r3, #8]
 80016bc:	831a      	strh	r2, [r3, #24]
 80016be:	4770      	bx	lr
 80016c0:	2000019c 	.word	0x2000019c

080016c4 <updateLEDs>:
}


void updateLEDs() {
 80016c4:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin(GROUP_BSE_LED, PIN_BSE_LED, status.flt_bse_mismatch);
 80016c6:	4d11      	ldr	r5, [pc, #68]	; (800170c <updateLEDs+0x48>)
 80016c8:	4c11      	ldr	r4, [pc, #68]	; (8001710 <updateLEDs+0x4c>)
 80016ca:	79aa      	ldrb	r2, [r5, #6]
 80016cc:	4620      	mov	r0, r4
 80016ce:	2104      	movs	r1, #4
 80016d0:	f7ff fb2e 	bl	8000d30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GROUP_APPS_LED, PIN_APPS_LED, status.flt_apps_mismatch);
 80016d4:	792a      	ldrb	r2, [r5, #4]
 80016d6:	4620      	mov	r0, r4
 80016d8:	2102      	movs	r1, #2
 80016da:	f7ff fb29 	bl	8000d30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GROUP_BSPD_LED, PIN_BSPD_LED, status.flt_bspd);
 80016de:	7b2a      	ldrb	r2, [r5, #12]
 80016e0:	4620      	mov	r0, r4
 80016e2:	2101      	movs	r1, #1
 80016e4:	f7ff fb24 	bl	8000d30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GROUP_BPPC_LED, PIN_BPPC_LED, status.flt_bppc);
 80016e8:	7baa      	ldrb	r2, [r5, #14]
 80016ea:	4620      	mov	r0, r4
 80016ec:	2108      	movs	r1, #8
 80016ee:	f7ff fb1f 	bl	8000d30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GROUP_FLT_R_LED, PIN_FLT_R_LED, status.internal_flt_r);
 80016f2:	7a2a      	ldrb	r2, [r5, #8]
 80016f4:	4620      	mov	r0, r4
 80016f6:	2110      	movs	r1, #16
 80016f8:	f7ff fb1a 	bl	8000d30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GROUP_FLT_NR_LED, PIN_FLT_NR_LED, status.internal_flt_nr);
 80016fc:	7aaa      	ldrb	r2, [r5, #10]
 80016fe:	4620      	mov	r0, r4
 8001700:	2120      	movs	r1, #32
}
 8001702:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_WritePin(GROUP_FLT_NR_LED, PIN_FLT_NR_LED, status.internal_flt_nr);
 8001706:	f7ff bb13 	b.w	8000d30 <HAL_GPIO_WritePin>
 800170a:	bf00      	nop
 800170c:	200001b6 	.word	0x200001b6
 8001710:	40021000 	.word	0x40021000

08001714 <clearFaults>:


void clearFaults() {
    status.isThrottle = 0;
 8001714:	4b05      	ldr	r3, [pc, #20]	; (800172c <clearFaults+0x18>)
 8001716:	2200      	movs	r2, #0
 8001718:	801a      	strh	r2, [r3, #0]
    status.flt_apps_mismatch = 0;
 800171a:	809a      	strh	r2, [r3, #4]

    status.isBrake = 0;
 800171c:	805a      	strh	r2, [r3, #2]
    status.flt_bse_mismatch = 0;
 800171e:	80da      	strh	r2, [r3, #6]

    status.flt_bspd = 0;
 8001720:	819a      	strh	r2, [r3, #12]
    status.flt_bppc = 0;
 8001722:	81da      	strh	r2, [r3, #14]

    status.internal_flt_r = 0;
 8001724:	811a      	strh	r2, [r3, #8]
    status.internal_flt_nr = 0;
 8001726:	815a      	strh	r2, [r3, #10]
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	200001b6 	.word	0x200001b6

08001730 <init>:
	clearFaults();
 8001730:	f7ff bff0 	b.w	8001714 <clearFaults>

08001734 <assertFaults>:


void assertFaults() {
    // Pull FLT_R line low if there is a flt_r
    // (inversion provided by hardware)
    HAL_GPIO_WritePin(GROUP_MCU_FLT, PIN_MCU_FLT,
 8001734:	4b03      	ldr	r3, [pc, #12]	; (8001744 <assertFaults+0x10>)
 8001736:	4804      	ldr	r0, [pc, #16]	; (8001748 <assertFaults+0x14>)
 8001738:	7a1a      	ldrb	r2, [r3, #8]
 800173a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800173e:	f7ff baf7 	b.w	8000d30 <HAL_GPIO_WritePin>
 8001742:	bf00      	nop
 8001744:	200001b6 	.word	0x200001b6
 8001748:	40020400 	.word	0x40020400

0800174c <getAppsMismatch>:
uint16_t getIsBrake() {
    return (sensors.brake > BRAKE_THRESH) ? 1 : 0;
}

uint16_t getAppsMismatch() {
    return (abs(sensors.apps1 - sensors.apps2) > APPS_DIFF_THRESH);
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <getAppsMismatch+0x1c>)
 800174e:	8818      	ldrh	r0, [r3, #0]
 8001750:	885b      	ldrh	r3, [r3, #2]
 8001752:	1ac0      	subs	r0, r0, r3
 8001754:	2800      	cmp	r0, #0
 8001756:	bfb8      	it	lt
 8001758:	4240      	neglt	r0, r0
}
 800175a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800175e:	bfd4      	ite	le
 8001760:	2000      	movle	r0, #0
 8001762:	2001      	movgt	r0, #1
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	2000019c 	.word	0x2000019c

0800176c <getBseMismatch>:

uint16_t getBseMismatch() {
    return (abs(sensors.bse1 - sensors.bse2) > BSE_DIFF_THRESH);
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <getBseMismatch+0x1c>)
 800176e:	8898      	ldrh	r0, [r3, #4]
 8001770:	88db      	ldrh	r3, [r3, #6]
 8001772:	1ac0      	subs	r0, r0, r3
 8001774:	2800      	cmp	r0, #0
 8001776:	bfb8      	it	lt
 8001778:	4240      	neglt	r0, r0
}
 800177a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800177e:	bfd4      	ite	le
 8001780:	2000      	movle	r0, #0
 8001782:	2001      	movgt	r0, #1
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	2000019c 	.word	0x2000019c

0800178c <getPotato>:

uint16_t getPotato() {
 800178c:	b508      	push	{r3, lr}
    return HAL_GPIO_ReadPin(GROUP_BSPD, PIN_BSPD) == LO;
 800178e:	2180      	movs	r1, #128	; 0x80
 8001790:	4803      	ldr	r0, [pc, #12]	; (80017a0 <getPotato+0x14>)
 8001792:	f7ff fac7 	bl	8000d24 <HAL_GPIO_ReadPin>
}
 8001796:	fab0 f080 	clz	r0, r0
 800179a:	0940      	lsrs	r0, r0, #5
 800179c:	bd08      	pop	{r3, pc}
 800179e:	bf00      	nop
 80017a0:	40020400 	.word	0x40020400

080017a4 <getBppcFault>:

uint16_t getBppcFault() {
    return ( (sensors.apps1 > BPPC_QTR_THROTTLE) ||
 80017a4:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <getBppcFault+0x34>)
             (sensors.apps2 > BPPC_QTR_THROTTLE) ) &&
 80017a6:	881a      	ldrh	r2, [r3, #0]
 80017a8:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80017ac:	461a      	mov	r2, r3
 80017ae:	d803      	bhi.n	80017b8 <getBppcFault+0x14>
    return ( (sensors.apps1 > BPPC_QTR_THROTTLE) ||
 80017b0:	885b      	ldrh	r3, [r3, #2]
 80017b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017b6:	d90a      	bls.n	80017ce <getBppcFault+0x2a>
             (sensors.apps2 > BPPC_QTR_THROTTLE) ) &&
 80017b8:	8893      	ldrh	r3, [r2, #4]
 80017ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017be:	d808      	bhi.n	80017d2 <getBppcFault+0x2e>
           ( (sensors.bse1 > BPPC_BRK_THRESH) ||
 80017c0:	88d0      	ldrh	r0, [r2, #6]
 80017c2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80017c6:	bf94      	ite	ls
 80017c8:	2000      	movls	r0, #0
 80017ca:	2001      	movhi	r0, #1
 80017cc:	4770      	bx	lr
             (sensors.apps2 > BPPC_QTR_THROTTLE) ) &&
 80017ce:	2000      	movs	r0, #0
 80017d0:	4770      	bx	lr
 80017d2:	2001      	movs	r0, #1
             (sensors.bse2 > BPPC_BRK_THRESH) );
}
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	2000019c 	.word	0x2000019c

080017dc <updateFaults>:
    return (sensors.throttle > THROTTLE_THRESH) ? 1 : 0;
 80017dc:	4a14      	ldr	r2, [pc, #80]	; (8001830 <updateFaults+0x54>)
 80017de:	8a93      	ldrh	r3, [r2, #20]
void updateFaults() {
 80017e0:	b510      	push	{r4, lr}
    return (sensors.throttle > THROTTLE_THRESH) ? 1 : 0;
 80017e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    status.isThrottle = getIsThrottle();
 80017e6:	4c13      	ldr	r4, [pc, #76]	; (8001834 <updateFaults+0x58>)
    return (sensors.throttle > THROTTLE_THRESH) ? 1 : 0;
 80017e8:	bf94      	ite	ls
 80017ea:	2300      	movls	r3, #0
 80017ec:	2301      	movhi	r3, #1
    status.isThrottle = getIsThrottle();
 80017ee:	8023      	strh	r3, [r4, #0]
    return (sensors.brake > BRAKE_THRESH) ? 1 : 0;
 80017f0:	8ad3      	ldrh	r3, [r2, #22]
 80017f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017f6:	bf94      	ite	ls
 80017f8:	2300      	movls	r3, #0
 80017fa:	2301      	movhi	r3, #1
    status.isBrake = getIsBrake();
 80017fc:	8063      	strh	r3, [r4, #2]
    status.flt_apps_mismatch = getAppsMismatch();
 80017fe:	f7ff ffa5 	bl	800174c <getAppsMismatch>
 8001802:	80a0      	strh	r0, [r4, #4]
    status.flt_bse_mismatch = getBseMismatch();
 8001804:	f7ff ffb2 	bl	800176c <getBseMismatch>
 8001808:	80e0      	strh	r0, [r4, #6]
    status.flt_bspd = getPotato();       // BSPD fault
 800180a:	f7ff ffbf 	bl	800178c <getPotato>
 800180e:	4601      	mov	r1, r0
 8001810:	81a0      	strh	r0, [r4, #12]
    status.flt_bppc = getBppcFault();
 8001812:	f7ff ffc7 	bl	80017a4 <getBppcFault>
                    status.flt_bse_mismatch || status.flt_bppc;
 8001816:	88a3      	ldrh	r3, [r4, #4]
    status.flt_bppc = getBppcFault();
 8001818:	81e0      	strh	r0, [r4, #14]
                    status.flt_bse_mismatch || status.flt_bppc;
 800181a:	b93b      	cbnz	r3, 800182c <updateFaults+0x50>
    status.internal_flt_r  = status.flt_apps_mismatch ||
 800181c:	88e3      	ldrh	r3, [r4, #6]
 800181e:	b92b      	cbnz	r3, 800182c <updateFaults+0x50>
                    status.flt_bse_mismatch || status.flt_bppc;
 8001820:	3000      	adds	r0, #0
 8001822:	bf18      	it	ne
 8001824:	2001      	movne	r0, #1
    status.internal_flt_r  = status.flt_apps_mismatch ||
 8001826:	8120      	strh	r0, [r4, #8]
    status.internal_flt_nr = status.flt_bspd;
 8001828:	8161      	strh	r1, [r4, #10]
 800182a:	bd10      	pop	{r4, pc}
                    status.flt_bse_mismatch || status.flt_bppc;
 800182c:	2001      	movs	r0, #1
 800182e:	e7fa      	b.n	8001826 <updateFaults+0x4a>
 8001830:	2000019c 	.word	0x2000019c
 8001834:	200001b6 	.word	0x200001b6

08001838 <can_sendThrottle>:



// ##### MAIN LOOP FUNCTIONS #####

void can_sendThrottle() {
 8001838:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    can_msg_t msg;
    CAN_short_msg(&msg, create_ID(BID_IO, MID_THROTTLE), sensors.throttle);
 800183a:	21f0      	movs	r1, #240	; 0xf0
 800183c:	2003      	movs	r0, #3
 800183e:	f000 f9bf 	bl	8001bc0 <create_ID>
 8001842:	4b06      	ldr	r3, [pc, #24]	; (800185c <can_sendThrottle+0x24>)
 8001844:	4601      	mov	r1, r0
 8001846:	8a9a      	ldrh	r2, [r3, #20]
 8001848:	a801      	add	r0, sp, #4
 800184a:	f000 f9c9 	bl	8001be0 <CAN_short_msg>
	CAN_queue_transmit(&msg);
 800184e:	a801      	add	r0, sp, #4
 8001850:	f000 f9cc 	bl	8001bec <CAN_queue_transmit>
}
 8001854:	b005      	add	sp, #20
 8001856:	f85d fb04 	ldr.w	pc, [sp], #4
 800185a:	bf00      	nop
 800185c:	2000019c 	.word	0x2000019c

08001860 <can_sendBrake>:

void can_sendBrake() {
 8001860:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    can_msg_t msg;
    CAN_short_msg(&msg, create_ID(BID_IO, MID_BRAKE), sensors.brake);
 8001862:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001866:	2003      	movs	r0, #3
 8001868:	f000 f9aa 	bl	8001bc0 <create_ID>
 800186c:	4b05      	ldr	r3, [pc, #20]	; (8001884 <can_sendBrake+0x24>)
 800186e:	4601      	mov	r1, r0
 8001870:	8ada      	ldrh	r2, [r3, #22]
 8001872:	a801      	add	r0, sp, #4
 8001874:	f000 f9b4 	bl	8001be0 <CAN_short_msg>
	CAN_queue_transmit(&msg);
 8001878:	a801      	add	r0, sp, #4
 800187a:	f000 f9b7 	bl	8001bec <CAN_queue_transmit>
}
 800187e:	b005      	add	sp, #20
 8001880:	f85d fb04 	ldr.w	pc, [sp], #4
 8001884:	2000019c 	.word	0x2000019c

08001888 <mainLoop>:
void mainLoop(){
 8001888:	b570      	push	{r4, r5, r6, lr}
	readApps(hadc3);
 800188a:	4e28      	ldr	r6, [pc, #160]	; (800192c <mainLoop+0xa4>)
 800188c:	f106 0510 	add.w	r5, r6, #16
 8001890:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void mainLoop(){
 8001892:	b08e      	sub	sp, #56	; 0x38
	readApps(hadc3);
 8001894:	466c      	mov	r4, sp
 8001896:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001898:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800189a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800189c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800189e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018a0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80018a4:	e884 0003 	stmia.w	r4, {r0, r1}
 80018a8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
	readBse(hadc1);
 80018ac:	4e20      	ldr	r6, [pc, #128]	; (8001930 <mainLoop+0xa8>)
 80018ae:	f106 0510 	add.w	r5, r6, #16
	readApps(hadc3);
 80018b2:	f7ff fe2f 	bl	8001514 <readApps>
	readBse(hadc1);
 80018b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018b8:	466c      	mov	r4, sp
 80018ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018c4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80018c8:	e884 0003 	stmia.w	r4, {r0, r1}
 80018cc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
	readCurr(hadc2);
 80018d0:	4e18      	ldr	r6, [pc, #96]	; (8001934 <mainLoop+0xac>)
 80018d2:	f106 0510 	add.w	r5, r6, #16
	readBse(hadc1);
 80018d6:	f7ff fe4b 	bl	8001570 <readBse>
	readCurr(hadc2);
 80018da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018dc:	466c      	mov	r4, sp
 80018de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018e8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80018ec:	e884 0003 	stmia.w	r4, {r0, r1}
 80018f0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80018f4:	f7ff fe6a 	bl	80015cc <readCurr>
	filterApps();
 80018f8:	f7ff fe86 	bl	8001608 <filterApps>
	filterBse();
 80018fc:	f7ff fe9e 	bl	800163c <filterBse>
	filterCurr();
 8001900:	f7ff feb6 	bl	8001670 <filterCurr>
	scaleThrottle();
 8001904:	f7ff fec4 	bl	8001690 <scaleThrottle>
	scaleBrake();
 8001908:	f7ff fecc 	bl	80016a4 <scaleBrake>
	scaleCurrent();
 800190c:	f7ff fed4 	bl	80016b8 <scaleCurrent>
	updateFaults();
 8001910:	f7ff ff64 	bl	80017dc <updateFaults>
	updateLEDs();
 8001914:	f7ff fed6 	bl	80016c4 <updateLEDs>
	assertFaults();
 8001918:	f7ff ff0c 	bl	8001734 <assertFaults>
	can_sendBrake();
 800191c:	f7ff ffa0 	bl	8001860 <can_sendBrake>
}
 8001920:	b00e      	add	sp, #56	; 0x38
 8001922:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	can_sendThrottle();
 8001926:	f7ff bf87 	b.w	8001838 <can_sendThrottle>
 800192a:	bf00      	nop
 800192c:	2000012c 	.word	0x2000012c
 8001930:	200000e4 	.word	0x200000e4
 8001934:	2000009c 	.word	0x2000009c

08001938 <can_sendPedalStatus>:

// Accelerator and brake messages (2 separate) - in mainloop


// Sends isThrottle, isBrake, and mismatch faults
void can_sendPedalStatus() {
 8001938:	b530      	push	{r4, r5, lr}
    // MESSAGE BUS:
    //      [1] - mismatch fault (active high)
    //      [0] - pedal status (active high pressed)

    // (*) Send throttle status and mismatch fault
    uint16_t msg = ( (status.flt_apps_mismatch << 1)
 800193a:	4d13      	ldr	r5, [pc, #76]	; (8001988 <can_sendPedalStatus+0x50>)
 800193c:	88aa      	ldrh	r2, [r5, #4]
				   | (status.isThrottle) );
 800193e:	882c      	ldrh	r4, [r5, #0]
void can_sendPedalStatus() {
 8001940:	b087      	sub	sp, #28
    can_msg_t can_throttle_msg;
	CAN_short_msg(&can_throttle_msg, create_ID(BID_IO, MID_THROTTLE_STATUS), msg);
 8001942:	2180      	movs	r1, #128	; 0x80
 8001944:	2003      	movs	r0, #3
				   | (status.isThrottle) );
 8001946:	ea44 0442 	orr.w	r4, r4, r2, lsl #1
	CAN_short_msg(&can_throttle_msg, create_ID(BID_IO, MID_THROTTLE_STATUS), msg);
 800194a:	f000 f939 	bl	8001bc0 <create_ID>
    uint16_t msg = ( (status.flt_apps_mismatch << 1)
 800194e:	b2a4      	uxth	r4, r4
	CAN_short_msg(&can_throttle_msg, create_ID(BID_IO, MID_THROTTLE_STATUS), msg);
 8001950:	4622      	mov	r2, r4
 8001952:	4601      	mov	r1, r0
 8001954:	4668      	mov	r0, sp
 8001956:	f000 f943 	bl	8001be0 <CAN_short_msg>
	CAN_queue_transmit(&can_throttle_msg);
 800195a:	4668      	mov	r0, sp
 800195c:	f000 f946 	bl	8001bec <CAN_queue_transmit>

    // (*) Send brake status and mismatch fault
    msg          = ( (status.flt_bse_mismatch << 1)
 8001960:	88ea      	ldrh	r2, [r5, #6]
				   | (status.isBrake) );
 8001962:	886c      	ldrh	r4, [r5, #2]
    can_msg_t can_brake_status_msg;
	CAN_short_msg(&can_brake_status_msg, create_ID(BID_IO, MID_BRAKE_STATUS), msg);
 8001964:	2190      	movs	r1, #144	; 0x90
 8001966:	2003      	movs	r0, #3
				   | (status.isBrake) );
 8001968:	ea44 0442 	orr.w	r4, r4, r2, lsl #1
	CAN_short_msg(&can_brake_status_msg, create_ID(BID_IO, MID_BRAKE_STATUS), msg);
 800196c:	f000 f928 	bl	8001bc0 <create_ID>
    msg          = ( (status.flt_bse_mismatch << 1)
 8001970:	b2a4      	uxth	r4, r4
	CAN_short_msg(&can_brake_status_msg, create_ID(BID_IO, MID_BRAKE_STATUS), msg);
 8001972:	4601      	mov	r1, r0
 8001974:	4622      	mov	r2, r4
 8001976:	a803      	add	r0, sp, #12
 8001978:	f000 f932 	bl	8001be0 <CAN_short_msg>
	CAN_queue_transmit(&can_brake_status_msg);
 800197c:	a803      	add	r0, sp, #12
 800197e:	f000 f935 	bl	8001bec <CAN_queue_transmit>
}
 8001982:	b007      	add	sp, #28
 8001984:	bd30      	pop	{r4, r5, pc}
 8001986:	bf00      	nop
 8001988:	200001b6 	.word	0x200001b6

0800198c <sendCANStatuses>:
            msg);
	CAN_queue_transmit(&can_faults_msg);
}

void sendCANStatuses(){
	can_sendPedalStatus();
 800198c:	f7ff bfd4 	b.w	8001938 <can_sendPedalStatus>

08001990 <sendHeartbeat>:
	//TODO(@bgberr): uncomment
	//can_sendFaultStatus();
}

void sendHeartbeat() {
 8001990:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    can_msg_t msg;
	CAN_short_msg(&msg, create_ID(BID_IO, MID_HEARTBEAT), 0);
 8001992:	2130      	movs	r1, #48	; 0x30
 8001994:	2003      	movs	r0, #3
 8001996:	f000 f913 	bl	8001bc0 <create_ID>
 800199a:	2200      	movs	r2, #0
 800199c:	4601      	mov	r1, r0
 800199e:	a801      	add	r0, sp, #4
 80019a0:	f000 f91e 	bl	8001be0 <CAN_short_msg>
	CAN_queue_transmit(&msg);
 80019a4:	a801      	add	r0, sp, #4
 80019a6:	f000 f921 	bl	8001bec <CAN_queue_transmit>
}
 80019aa:	b005      	add	sp, #20
 80019ac:	f85d fb04 	ldr.w	pc, [sp], #4

080019b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019b0:	b530      	push	{r4, r5, lr}
 80019b2:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019b4:	4b27      	ldr	r3, [pc, #156]	; (8001a54 <SystemClock_Config+0xa4>)
 80019b6:	2100      	movs	r1, #0
 80019b8:	9101      	str	r1, [sp, #4]
 80019ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019bc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80019c0:	641a      	str	r2, [r3, #64]	; 0x40
 80019c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c8:	9301      	str	r3, [sp, #4]
 80019ca:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019cc:	4b22      	ldr	r3, [pc, #136]	; (8001a58 <SystemClock_Config+0xa8>)
 80019ce:	9102      	str	r1, [sp, #8]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019de:	9302      	str	r3, [sp, #8]
 80019e0:	9b02      	ldr	r3, [sp, #8]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019e2:	2301      	movs	r3, #1
 80019e4:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019ea:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019f0:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
 80019f2:	2404      	movs	r4, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019f4:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019f6:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLN = 168;
 80019f8:	23a8      	movs	r3, #168	; 0xa8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019fa:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80019fc:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80019fe:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a00:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a02:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a04:	f7ff f99a 	bl	8000d3c <HAL_RCC_OscConfig>
 8001a08:	b100      	cbz	r0, 8001a0c <SystemClock_Config+0x5c>
 8001a0a:	e7fe      	b.n	8001a0a <SystemClock_Config+0x5a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a0c:	230f      	movs	r3, #15
 8001a0e:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a10:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a14:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a16:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a18:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a1e:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a20:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a22:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a24:	f7ff fb3a 	bl	800109c <HAL_RCC_ClockConfig>
 8001a28:	4605      	mov	r5, r0
 8001a2a:	b100      	cbz	r0, 8001a2e <SystemClock_Config+0x7e>
 8001a2c:	e7fe      	b.n	8001a2c <SystemClock_Config+0x7c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001a2e:	f7ff fbcf 	bl	80011d0 <HAL_RCC_GetHCLKFreq>
 8001a32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a36:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a3a:	f7ff f86b 	bl	8000b14 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001a3e:	4620      	mov	r0, r4
 8001a40:	f7ff f87e 	bl	8000b40 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001a44:	462a      	mov	r2, r5
 8001a46:	4629      	mov	r1, r5
 8001a48:	f04f 30ff 	mov.w	r0, #4294967295
 8001a4c:	f7ff f82e 	bl	8000aac <HAL_NVIC_SetPriority>
}
 8001a50:	b015      	add	sp, #84	; 0x54
 8001a52:	bd30      	pop	{r4, r5, pc}
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40007000 	.word	0x40007000

08001a5c <main>:
{
 8001a5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_Init();
 8001a5e:	f7fe fd5f 	bl	8000520 <HAL_Init>
  SystemClock_Config();
 8001a62:	f7ff ffa5 	bl	80019b0 <SystemClock_Config>
  MX_GPIO_Init();
 8001a66:	f7ff fd09 	bl	800147c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001a6a:	f7ff fbb7 	bl	80011dc <MX_ADC1_Init>
  MX_ADC2_Init();
 8001a6e:	f7ff fbf9 	bl	8001264 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001a72:	f7ff fc2b 	bl	80012cc <MX_ADC3_Init>
  MX_CAN1_Init();
 8001a76:	f7ff fcb3 	bl	80013e0 <MX_CAN1_Init>
  Init_MyCAN();
 8001a7a:	f000 f889 	bl	8001b90 <Init_MyCAN>
  init();
 8001a7e:	f7ff fe57 	bl	8001730 <init>
  MakeSchedule(&schedule, 3);
 8001a82:	2103      	movs	r1, #3
 8001a84:	a801      	add	r0, sp, #4
 8001a86:	f000 f8e7 	bl	8001c58 <MakeSchedule>
  AddTask(&schedule, &mainLoop, 437);
 8001a8a:	f240 12b5 	movw	r2, #437	; 0x1b5
 8001a8e:	490a      	ldr	r1, [pc, #40]	; (8001ab8 <main+0x5c>)
 8001a90:	a801      	add	r0, sp, #4
 8001a92:	f000 f8ef 	bl	8001c74 <AddTask>
  AddTask(&schedule, &sendCANStatuses, 758);
 8001a96:	f240 22f6 	movw	r2, #758	; 0x2f6
 8001a9a:	4908      	ldr	r1, [pc, #32]	; (8001abc <main+0x60>)
 8001a9c:	a801      	add	r0, sp, #4
 8001a9e:	f000 f8e9 	bl	8001c74 <AddTask>
  AddTask(&schedule, &sendHeartbeat, 1000);
 8001aa2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001aa6:	4906      	ldr	r1, [pc, #24]	; (8001ac0 <main+0x64>)
 8001aa8:	a801      	add	r0, sp, #4
 8001aaa:	f000 f8e3 	bl	8001c74 <AddTask>
	  RunSchedule(&schedule);
 8001aae:	a801      	add	r0, sp, #4
 8001ab0:	f000 f8f2 	bl	8001c98 <RunSchedule>
 8001ab4:	e7fb      	b.n	8001aae <main+0x52>
 8001ab6:	bf00      	nop
 8001ab8:	08001889 	.word	0x08001889
 8001abc:	0800198d 	.word	0x0800198d
 8001ac0:	08001991 	.word	0x08001991

08001ac4 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8001ac4:	e7fe      	b.n	8001ac4 <_Error_Handler>

08001ac6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ac6:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ac8:	2003      	movs	r0, #3
 8001aca:	f7fe ffdd 	bl	8000a88 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	4611      	mov	r1, r2
 8001ad2:	f06f 000b 	mvn.w	r0, #11
 8001ad6:	f7fe ffe9 	bl	8000aac <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001ada:	2200      	movs	r2, #0
 8001adc:	4611      	mov	r1, r2
 8001ade:	f06f 000a 	mvn.w	r0, #10
 8001ae2:	f7fe ffe3 	bl	8000aac <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	4611      	mov	r1, r2
 8001aea:	f06f 0009 	mvn.w	r0, #9
 8001aee:	f7fe ffdd 	bl	8000aac <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001af2:	2200      	movs	r2, #0
 8001af4:	4611      	mov	r1, r2
 8001af6:	f06f 0004 	mvn.w	r0, #4
 8001afa:	f7fe ffd7 	bl	8000aac <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001afe:	2200      	movs	r2, #0
 8001b00:	4611      	mov	r1, r2
 8001b02:	f06f 0003 	mvn.w	r0, #3
 8001b06:	f7fe ffd1 	bl	8000aac <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	4611      	mov	r1, r2
 8001b0e:	f06f 0001 	mvn.w	r0, #1
 8001b12:	f7fe ffcb 	bl	8000aac <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001b16:	2200      	movs	r2, #0
 8001b18:	4611      	mov	r1, r2
 8001b1a:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001b22:	f7fe bfc3 	b.w	8000aac <HAL_NVIC_SetPriority>

08001b26 <NMI_Handler>:
 8001b26:	4770      	bx	lr

08001b28 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001b28:	e7fe      	b.n	8001b28 <HardFault_Handler>

08001b2a <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001b2a:	e7fe      	b.n	8001b2a <MemManage_Handler>

08001b2c <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001b2c:	e7fe      	b.n	8001b2c <BusFault_Handler>

08001b2e <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001b2e:	e7fe      	b.n	8001b2e <UsageFault_Handler>

08001b30 <SVC_Handler>:
 8001b30:	4770      	bx	lr

08001b32 <DebugMon_Handler>:
 8001b32:	4770      	bx	lr

08001b34 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001b34:	4770      	bx	lr

08001b36 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001b36:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b38:	f7fe fd0c 	bl	8000554 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8001b40:	f7ff b80b 	b.w	8000b5a <HAL_SYSTICK_IRQHandler>

08001b44 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b44:	490f      	ldr	r1, [pc, #60]	; (8001b84 <SystemInit+0x40>)
 8001b46:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001b4a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001b52:	4b0d      	ldr	r3, [pc, #52]	; (8001b88 <SystemInit+0x44>)
 8001b54:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b56:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001b58:	f042 0201 	orr.w	r2, r2, #1
 8001b5c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001b5e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001b66:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b6a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001b6c:	4a07      	ldr	r2, [pc, #28]	; (8001b8c <SystemInit+0x48>)
 8001b6e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b76:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001b78:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b7a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001b7e:	608b      	str	r3, [r1, #8]
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	e000ed00 	.word	0xe000ed00
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	24003010 	.word	0x24003010

08001b90 <Init_MyCAN>:
#include "mycan.h"
#include "identifiers.h"

void Init_MyCAN()
{
	CAN1->MCR &= ~1;
 8001b90:	4b0a      	ldr	r3, [pc, #40]	; (8001bbc <Init_MyCAN+0x2c>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	f022 0201 	bic.w	r2, r2, #1
 8001b98:	601a      	str	r2, [r3, #0]
  	CAN1->sFilterRegister[0].FR1 = 0;
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
 	CAN1->sFilterRegister[0].FR2 = 0;
 8001ba0:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
 	CAN1->FA1R = 1;
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 	CAN1->FS1R = 1;
 8001baa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 	CAN1->FMR &= ~1;
 8001bae:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001bb2:	f022 0201 	bic.w	r2, r2, #1
 8001bb6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8001bba:	4770      	bx	lr
 8001bbc:	40006400 	.word	0x40006400

08001bc0 <create_ID>:
}

uint16_t create_ID(uint16_t board, uint16_t type)
{
	return (((uint16_t)type & 0b0000011111110000) | ((uint16_t)board & 0b00001111));
 8001bc0:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8001bc4:	f000 000f 	and.w	r0, r0, #15
}
 8001bc8:	4308      	orrs	r0, r1
 8001bca:	4770      	bx	lr

08001bcc <CAN_can_transmit>:
    CAN_short_msg(msg, identifier, payload);
}

bool CAN_can_transmit() {
	// Retrieve mailbox empty bits from CAN transmit register
	int empty_flags = (CAN1->TSR >> 26) & 0x07;
 8001bcc:	4b03      	ldr	r3, [pc, #12]	; (8001bdc <CAN_can_transmit+0x10>)
 8001bce:	6898      	ldr	r0, [r3, #8]

	// Check that at least one mailbox is empty
	return (empty_flags != 0x00);
}
 8001bd0:	f010 50e0 	ands.w	r0, r0, #469762048	; 0x1c000000
 8001bd4:	bf18      	it	ne
 8001bd6:	2001      	movne	r0, #1
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40006400 	.word	0x40006400

08001be0 <CAN_short_msg>:
	msg->data_length = 1;
	*(uint8_t*)(msg->data + 7) = data;
}
void CAN_short_msg(can_msg_t *msg, uint16_t identifier, uint16_t data) {
	msg->identifier = identifier;
	msg->data_length = 2;
 8001be0:	2302      	movs	r3, #2
	msg->identifier = identifier;
 8001be2:	8041      	strh	r1, [r0, #2]
	msg->data_length = 2;
 8001be4:	7003      	strb	r3, [r0, #0]
	*(uint16_t*)(msg->data + 6) = data;
 8001be6:	8142      	strh	r2, [r0, #10]
 8001be8:	4770      	bx	lr
	...

08001bec <CAN_queue_transmit>:
}
uint32_t CAN_decode_long(can_msg_t *msg) {
 return (msg->data[4] << 24) | (msg->data[5] << 16) | (msg->data[6] << 8) | msg->data[7];
}

bool CAN_queue_transmit(can_msg_t *msg) {
 8001bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bee:	4602      	mov	r2, r0
	// Check if at least one mailbox is available
	if (CAN_can_transmit()) {
 8001bf0:	f7ff ffec 	bl	8001bcc <CAN_can_transmit>
 8001bf4:	b368      	cbz	r0, 8001c52 <CAN_queue_transmit+0x66>
		dat_len_reg = msg->data_length;

		// Setup low data register with data[4] & data[5] & data[6] & data[7] (concat)
		dat_low_reg = (msg->data[4] << 24) | (msg->data[5] << 16) | (msg->data[6] << 8) | (msg->data[7]);
		// Setup high data register with data[0] & data[1] & data[2] & data[3] (concat)
		dat_high_reg = (msg->data[0] << 24) | (msg->data[1] << 16) | (msg->data[2] << 8) | (msg->data[3]);
 8001bf6:	7951      	ldrb	r1, [r2, #5]
 8001bf8:	7914      	ldrb	r4, [r2, #4]
		int mailbox = (CAN1->TSR >> 24) & 0x03;
 8001bfa:	4f16      	ldr	r7, [pc, #88]	; (8001c54 <CAN_queue_transmit+0x68>)
		dat_low_reg = (msg->data[4] << 24) | (msg->data[5] << 16) | (msg->data[6] << 8) | (msg->data[7]);
 8001bfc:	f892 e008 	ldrb.w	lr, [r2, #8]
		int mailbox = (CAN1->TSR >> 24) & 0x03;
 8001c00:	68bb      	ldr	r3, [r7, #8]
		identifier_reg |= (msg->identifier << 21);
 8001c02:	8855      	ldrh	r5, [r2, #2]
		dat_len_reg = msg->data_length;
 8001c04:	7816      	ldrb	r6, [r2, #0]
		dat_high_reg = (msg->data[0] << 24) | (msg->data[1] << 16) | (msg->data[2] << 8) | (msg->data[3]);
 8001c06:	0409      	lsls	r1, r1, #16
 8001c08:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 8001c0c:	79d4      	ldrb	r4, [r2, #7]
 8001c0e:	4321      	orrs	r1, r4
 8001c10:	7994      	ldrb	r4, [r2, #6]
 8001c12:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
		dat_low_reg = (msg->data[4] << 24) | (msg->data[5] << 16) | (msg->data[6] << 8) | (msg->data[7]);
 8001c16:	7a54      	ldrb	r4, [r2, #9]
		int mailbox = (CAN1->TSR >> 24) & 0x03;
 8001c18:	f3c3 6301 	ubfx	r3, r3, #24, #2
		dat_low_reg = (msg->data[4] << 24) | (msg->data[5] << 16) | (msg->data[6] << 8) | (msg->data[7]);
 8001c1c:	0424      	lsls	r4, r4, #16
 8001c1e:	ea44 640e 	orr.w	r4, r4, lr, lsl #24

		CAN1->sTxMailBox[mailbox].TDLR = dat_low_reg;
 8001c22:	011b      	lsls	r3, r3, #4
		dat_low_reg = (msg->data[4] << 24) | (msg->data[5] << 16) | (msg->data[6] << 8) | (msg->data[7]);
 8001c24:	f892 e00b 	ldrb.w	lr, [r2, #11]
 8001c28:	7a92      	ldrb	r2, [r2, #10]
		CAN1->sTxMailBox[mailbox].TDLR = dat_low_reg;
 8001c2a:	441f      	add	r7, r3
 8001c2c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001c30:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
		identifier_reg |= (msg->identifier << 21);
 8001c34:	056d      	lsls	r5, r5, #21
		dat_low_reg = (msg->data[4] << 24) | (msg->data[5] << 16) | (msg->data[6] << 8) | (msg->data[7]);
 8001c36:	ea44 040e 	orr.w	r4, r4, lr
		identifier_reg |= 0x01;
 8001c3a:	f045 0501 	orr.w	r5, r5, #1
		dat_low_reg = (msg->data[4] << 24) | (msg->data[5] << 16) | (msg->data[6] << 8) | (msg->data[7]);
 8001c3e:	ea44 2202 	orr.w	r2, r4, r2, lsl #8
		CAN1->sTxMailBox[mailbox].TDLR = dat_low_reg;
 8001c42:	f8c7 2188 	str.w	r2, [r7, #392]	; 0x188
		CAN1->sTxMailBox[mailbox].TDHR = dat_high_reg;
 8001c46:	f8c7 118c 	str.w	r1, [r7, #396]	; 0x18c
		CAN1->sTxMailBox[mailbox].TDTR = dat_len_reg;
 8001c4a:	f8c3 6184 	str.w	r6, [r3, #388]	; 0x184

		// Set the identifier register to start the transaction
		CAN1->sTxMailBox[mailbox].TIR = identifier_reg;
 8001c4e:	f8c3 5180 	str.w	r5, [r3, #384]	; 0x180
		return true;

	} else {
		return false;
	}
}
 8001c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c54:	40006400 	.word	0x40006400

08001c58 <MakeSchedule>:
//TODO(@bgberr): should probably profile this on the boards and make sure it's not crazy slow
#include "scheduler.h"

void MakeSchedule(Schedule *schedule, uint8_t schedule_size) {
 8001c58:	b538      	push	{r3, r4, r5, lr}
 8001c5a:	4604      	mov	r4, r0
  schedule->schedule_ = malloc(sizeof(Schedule) * schedule_size);
 8001c5c:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8001c60:	0080      	lsls	r0, r0, #2
void MakeSchedule(Schedule *schedule, uint8_t schedule_size) {
 8001c62:	460d      	mov	r5, r1
  schedule->schedule_ = malloc(sizeof(Schedule) * schedule_size);
 8001c64:	f000 f880 	bl	8001d68 <malloc>
  schedule->max_schedule_size_ = schedule_size;
  schedule->schedule_size_ = 0;
 8001c68:	2300      	movs	r3, #0
  schedule->max_schedule_size_ = schedule_size;
 8001c6a:	7165      	strb	r5, [r4, #5]
  schedule->schedule_size_ = 0;
 8001c6c:	7123      	strb	r3, [r4, #4]
  schedule->schedule_ = malloc(sizeof(Schedule) * schedule_size);
 8001c6e:	6020      	str	r0, [r4, #0]
  schedule->counter_ = 0;
 8001c70:	60a3      	str	r3, [r4, #8]
 8001c72:	bd38      	pop	{r3, r4, r5, pc}

08001c74 <AddTask>:
}

int AddTask(Schedule *schedule, void (*function)(void), uint16_t period) {
 8001c74:	b570      	push	{r4, r5, r6, lr}
  if(schedule->schedule_size_ >= schedule->max_schedule_size_) {
 8001c76:	7903      	ldrb	r3, [r0, #4]
 8001c78:	7944      	ldrb	r4, [r0, #5]
 8001c7a:	429c      	cmp	r4, r3
 8001c7c:	d90a      	bls.n	8001c94 <AddTask+0x20>
    return 0;
  }

  Task *task = &schedule->schedule_[schedule->schedule_size_];
 8001c7e:	6804      	ldr	r4, [r0, #0]
 8001c80:	b21d      	sxth	r5, r3
 8001c82:	eb04 06c5 	add.w	r6, r4, r5, lsl #3
  task->func_ = function;
  task->period_ = period;
  schedule->schedule_size_++;
 8001c86:	3301      	adds	r3, #1
  task->func_ = function;
 8001c88:	f844 1035 	str.w	r1, [r4, r5, lsl #3]
  task->period_ = period;
 8001c8c:	80b2      	strh	r2, [r6, #4]
  schedule->schedule_size_++;
 8001c8e:	7103      	strb	r3, [r0, #4]
  return 1;
 8001c90:	2001      	movs	r0, #1
 8001c92:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
 8001c94:	2000      	movs	r0, #0
}
 8001c96:	bd70      	pop	{r4, r5, r6, pc}

08001c98 <RunSchedule>:

void RunSchedule(Schedule *schedule) {
  schedule->counter_++;
 8001c98:	6883      	ldr	r3, [r0, #8]
 8001c9a:	3301      	adds	r3, #1
void RunSchedule(Schedule *schedule) {
 8001c9c:	b570      	push	{r4, r5, r6, lr}
 8001c9e:	4604      	mov	r4, r0
  schedule->counter_++;
 8001ca0:	6083      	str	r3, [r0, #8]
  for(uint8_t i = 0; i < schedule->schedule_size_; i++) {
 8001ca2:	2500      	movs	r5, #0
 8001ca4:	7922      	ldrb	r2, [r4, #4]
 8001ca6:	b2eb      	uxtb	r3, r5
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d800      	bhi.n	8001cae <RunSchedule+0x16>
    schedule->counter_ % schedule->schedule_[i].period_ ? 0 : schedule->schedule_[i].func_();
  }
}
 8001cac:	bd70      	pop	{r4, r5, r6, pc}
    schedule->counter_ % schedule->schedule_[i].period_ ? 0 : schedule->schedule_[i].func_();
 8001cae:	6821      	ldr	r1, [r4, #0]
 8001cb0:	68a6      	ldr	r6, [r4, #8]
 8001cb2:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8001cb6:	8890      	ldrh	r0, [r2, #4]
 8001cb8:	fbb6 f2f0 	udiv	r2, r6, r0
 8001cbc:	fb00 6212 	mls	r2, r0, r2, r6
 8001cc0:	b912      	cbnz	r2, 8001cc8 <RunSchedule+0x30>
 8001cc2:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8001cc6:	4798      	blx	r3
 8001cc8:	3501      	adds	r5, #1
 8001cca:	e7eb      	b.n	8001ca4 <RunSchedule+0xc>

08001ccc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ccc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d04 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001cd0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001cd2:	e003      	b.n	8001cdc <LoopCopyDataInit>

08001cd4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001cd4:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001cd6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001cd8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001cda:	3104      	adds	r1, #4

08001cdc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001cdc:	480b      	ldr	r0, [pc, #44]	; (8001d0c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001cde:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ce0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ce2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ce4:	d3f6      	bcc.n	8001cd4 <CopyDataInit>
  ldr  r2, =_sbss
 8001ce6:	4a0b      	ldr	r2, [pc, #44]	; (8001d14 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ce8:	e002      	b.n	8001cf0 <LoopFillZerobss>

08001cea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001cea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001cec:	f842 3b04 	str.w	r3, [r2], #4

08001cf0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001cf0:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001cf2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001cf4:	d3f9      	bcc.n	8001cea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001cf6:	f7ff ff25 	bl	8001b44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cfa:	f000 f811 	bl	8001d20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cfe:	f7ff fead 	bl	8001a5c <main>
  bx  lr    
 8001d02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d04:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001d08:	08001ec8 	.word	0x08001ec8
  ldr  r0, =_sdata
 8001d0c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d10:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001d14:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001d18:	200001cc 	.word	0x200001cc

08001d1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d1c:	e7fe      	b.n	8001d1c <ADC_IRQHandler>
	...

08001d20 <__libc_init_array>:
 8001d20:	b570      	push	{r4, r5, r6, lr}
 8001d22:	4e0d      	ldr	r6, [pc, #52]	; (8001d58 <__libc_init_array+0x38>)
 8001d24:	4c0d      	ldr	r4, [pc, #52]	; (8001d5c <__libc_init_array+0x3c>)
 8001d26:	1ba4      	subs	r4, r4, r6
 8001d28:	10a4      	asrs	r4, r4, #2
 8001d2a:	2500      	movs	r5, #0
 8001d2c:	42a5      	cmp	r5, r4
 8001d2e:	d109      	bne.n	8001d44 <__libc_init_array+0x24>
 8001d30:	4e0b      	ldr	r6, [pc, #44]	; (8001d60 <__libc_init_array+0x40>)
 8001d32:	4c0c      	ldr	r4, [pc, #48]	; (8001d64 <__libc_init_array+0x44>)
 8001d34:	f000 f89e 	bl	8001e74 <_init>
 8001d38:	1ba4      	subs	r4, r4, r6
 8001d3a:	10a4      	asrs	r4, r4, #2
 8001d3c:	2500      	movs	r5, #0
 8001d3e:	42a5      	cmp	r5, r4
 8001d40:	d105      	bne.n	8001d4e <__libc_init_array+0x2e>
 8001d42:	bd70      	pop	{r4, r5, r6, pc}
 8001d44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d48:	4798      	blx	r3
 8001d4a:	3501      	adds	r5, #1
 8001d4c:	e7ee      	b.n	8001d2c <__libc_init_array+0xc>
 8001d4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d52:	4798      	blx	r3
 8001d54:	3501      	adds	r5, #1
 8001d56:	e7f2      	b.n	8001d3e <__libc_init_array+0x1e>
 8001d58:	08001ec0 	.word	0x08001ec0
 8001d5c:	08001ec0 	.word	0x08001ec0
 8001d60:	08001ec0 	.word	0x08001ec0
 8001d64:	08001ec4 	.word	0x08001ec4

08001d68 <malloc>:
 8001d68:	4b02      	ldr	r3, [pc, #8]	; (8001d74 <malloc+0xc>)
 8001d6a:	4601      	mov	r1, r0
 8001d6c:	6818      	ldr	r0, [r3, #0]
 8001d6e:	f000 b803 	b.w	8001d78 <_malloc_r>
 8001d72:	bf00      	nop
 8001d74:	2000000c 	.word	0x2000000c

08001d78 <_malloc_r>:
 8001d78:	b570      	push	{r4, r5, r6, lr}
 8001d7a:	1ccd      	adds	r5, r1, #3
 8001d7c:	f025 0503 	bic.w	r5, r5, #3
 8001d80:	3508      	adds	r5, #8
 8001d82:	2d0c      	cmp	r5, #12
 8001d84:	bf38      	it	cc
 8001d86:	250c      	movcc	r5, #12
 8001d88:	2d00      	cmp	r5, #0
 8001d8a:	4606      	mov	r6, r0
 8001d8c:	db01      	blt.n	8001d92 <_malloc_r+0x1a>
 8001d8e:	42a9      	cmp	r1, r5
 8001d90:	d903      	bls.n	8001d9a <_malloc_r+0x22>
 8001d92:	230c      	movs	r3, #12
 8001d94:	6033      	str	r3, [r6, #0]
 8001d96:	2000      	movs	r0, #0
 8001d98:	bd70      	pop	{r4, r5, r6, pc}
 8001d9a:	f000 f85b 	bl	8001e54 <__malloc_lock>
 8001d9e:	4a23      	ldr	r2, [pc, #140]	; (8001e2c <_malloc_r+0xb4>)
 8001da0:	6814      	ldr	r4, [r2, #0]
 8001da2:	4621      	mov	r1, r4
 8001da4:	b991      	cbnz	r1, 8001dcc <_malloc_r+0x54>
 8001da6:	4c22      	ldr	r4, [pc, #136]	; (8001e30 <_malloc_r+0xb8>)
 8001da8:	6823      	ldr	r3, [r4, #0]
 8001daa:	b91b      	cbnz	r3, 8001db4 <_malloc_r+0x3c>
 8001dac:	4630      	mov	r0, r6
 8001dae:	f000 f841 	bl	8001e34 <_sbrk_r>
 8001db2:	6020      	str	r0, [r4, #0]
 8001db4:	4629      	mov	r1, r5
 8001db6:	4630      	mov	r0, r6
 8001db8:	f000 f83c 	bl	8001e34 <_sbrk_r>
 8001dbc:	1c43      	adds	r3, r0, #1
 8001dbe:	d126      	bne.n	8001e0e <_malloc_r+0x96>
 8001dc0:	230c      	movs	r3, #12
 8001dc2:	6033      	str	r3, [r6, #0]
 8001dc4:	4630      	mov	r0, r6
 8001dc6:	f000 f846 	bl	8001e56 <__malloc_unlock>
 8001dca:	e7e4      	b.n	8001d96 <_malloc_r+0x1e>
 8001dcc:	680b      	ldr	r3, [r1, #0]
 8001dce:	1b5b      	subs	r3, r3, r5
 8001dd0:	d41a      	bmi.n	8001e08 <_malloc_r+0x90>
 8001dd2:	2b0b      	cmp	r3, #11
 8001dd4:	d90f      	bls.n	8001df6 <_malloc_r+0x7e>
 8001dd6:	600b      	str	r3, [r1, #0]
 8001dd8:	50cd      	str	r5, [r1, r3]
 8001dda:	18cc      	adds	r4, r1, r3
 8001ddc:	4630      	mov	r0, r6
 8001dde:	f000 f83a 	bl	8001e56 <__malloc_unlock>
 8001de2:	f104 000b 	add.w	r0, r4, #11
 8001de6:	1d23      	adds	r3, r4, #4
 8001de8:	f020 0007 	bic.w	r0, r0, #7
 8001dec:	1ac3      	subs	r3, r0, r3
 8001dee:	d01b      	beq.n	8001e28 <_malloc_r+0xb0>
 8001df0:	425a      	negs	r2, r3
 8001df2:	50e2      	str	r2, [r4, r3]
 8001df4:	bd70      	pop	{r4, r5, r6, pc}
 8001df6:	428c      	cmp	r4, r1
 8001df8:	bf0d      	iteet	eq
 8001dfa:	6863      	ldreq	r3, [r4, #4]
 8001dfc:	684b      	ldrne	r3, [r1, #4]
 8001dfe:	6063      	strne	r3, [r4, #4]
 8001e00:	6013      	streq	r3, [r2, #0]
 8001e02:	bf18      	it	ne
 8001e04:	460c      	movne	r4, r1
 8001e06:	e7e9      	b.n	8001ddc <_malloc_r+0x64>
 8001e08:	460c      	mov	r4, r1
 8001e0a:	6849      	ldr	r1, [r1, #4]
 8001e0c:	e7ca      	b.n	8001da4 <_malloc_r+0x2c>
 8001e0e:	1cc4      	adds	r4, r0, #3
 8001e10:	f024 0403 	bic.w	r4, r4, #3
 8001e14:	42a0      	cmp	r0, r4
 8001e16:	d005      	beq.n	8001e24 <_malloc_r+0xac>
 8001e18:	1a21      	subs	r1, r4, r0
 8001e1a:	4630      	mov	r0, r6
 8001e1c:	f000 f80a 	bl	8001e34 <_sbrk_r>
 8001e20:	3001      	adds	r0, #1
 8001e22:	d0cd      	beq.n	8001dc0 <_malloc_r+0x48>
 8001e24:	6025      	str	r5, [r4, #0]
 8001e26:	e7d9      	b.n	8001ddc <_malloc_r+0x64>
 8001e28:	bd70      	pop	{r4, r5, r6, pc}
 8001e2a:	bf00      	nop
 8001e2c:	2000008c 	.word	0x2000008c
 8001e30:	20000090 	.word	0x20000090

08001e34 <_sbrk_r>:
 8001e34:	b538      	push	{r3, r4, r5, lr}
 8001e36:	4c06      	ldr	r4, [pc, #24]	; (8001e50 <_sbrk_r+0x1c>)
 8001e38:	2300      	movs	r3, #0
 8001e3a:	4605      	mov	r5, r0
 8001e3c:	4608      	mov	r0, r1
 8001e3e:	6023      	str	r3, [r4, #0]
 8001e40:	f000 f80a 	bl	8001e58 <_sbrk>
 8001e44:	1c43      	adds	r3, r0, #1
 8001e46:	d102      	bne.n	8001e4e <_sbrk_r+0x1a>
 8001e48:	6823      	ldr	r3, [r4, #0]
 8001e4a:	b103      	cbz	r3, 8001e4e <_sbrk_r+0x1a>
 8001e4c:	602b      	str	r3, [r5, #0]
 8001e4e:	bd38      	pop	{r3, r4, r5, pc}
 8001e50:	200001c8 	.word	0x200001c8

08001e54 <__malloc_lock>:
 8001e54:	4770      	bx	lr

08001e56 <__malloc_unlock>:
 8001e56:	4770      	bx	lr

08001e58 <_sbrk>:
 8001e58:	4b04      	ldr	r3, [pc, #16]	; (8001e6c <_sbrk+0x14>)
 8001e5a:	6819      	ldr	r1, [r3, #0]
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	b909      	cbnz	r1, 8001e64 <_sbrk+0xc>
 8001e60:	4903      	ldr	r1, [pc, #12]	; (8001e70 <_sbrk+0x18>)
 8001e62:	6019      	str	r1, [r3, #0]
 8001e64:	6818      	ldr	r0, [r3, #0]
 8001e66:	4402      	add	r2, r0
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	4770      	bx	lr
 8001e6c:	20000094 	.word	0x20000094
 8001e70:	200001cc 	.word	0x200001cc

08001e74 <_init>:
 8001e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e76:	bf00      	nop
 8001e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e7a:	bc08      	pop	{r3}
 8001e7c:	469e      	mov	lr, r3
 8001e7e:	4770      	bx	lr

08001e80 <_fini>:
 8001e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e82:	bf00      	nop
 8001e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e86:	bc08      	pop	{r3}
 8001e88:	469e      	mov	lr, r3
 8001e8a:	4770      	bx	lr
